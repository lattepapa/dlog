{"expireTime":9007200857059810000,"key":"transformer-remark-markdown-ast-8a8124e591fe755f335c1597eb8d8934-gatsby-remark-katexgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Data Structure(3)","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":20,"offset":20},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":20,"offset":20},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Graph","position":{"start":{"line":4,"column":5,"offset":26},"end":{"line":4,"column":10,"offset":31},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":4,"column":10,"offset":31},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Graph : vertex(정점) 또는 node를 연결하는 edge(간선)으로 구성된 자료구조","position":{"start":{"line":6,"column":3,"offset":35},"end":{"line":6,"column":55,"offset":87},"indent":[]}}],"position":{"start":{"line":6,"column":3,"offset":35},"end":{"line":6,"column":55,"offset":87},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":33},"end":{"line":6,"column":55,"offset":87},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"예시 : 웹사이트(V:페이지, uE:링크), 지도(V:교차로, dE:도로), SNS(V:회원, uE:친구맺기) 등","position":{"start":{"line":7,"column":3,"offset":90},"end":{"line":7,"column":66,"offset":153},"indent":[]}}],"position":{"start":{"line":7,"column":3,"offset":90},"end":{"line":7,"column":66,"offset":153},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":88},"end":{"line":7,"column":66,"offset":153},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Graph의 종류","position":{"start":{"line":8,"column":3,"offset":156},"end":{"line":8,"column":12,"offset":165},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":156},"end":{"line":8,"column":12,"offset":165},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":9,"column":1,"offset":166},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"무방향(Undirected Graph) : 일명 '대칭' graph로, 한 edge에 두 vertex가 방향성 없이 대칭적으로 연결됨","position":{"start":{"line":10,"column":4,"offset":170},"end":{"line":10,"column":78,"offset":244},"indent":[]}}],"position":{"start":{"line":10,"column":4,"offset":170},"end":{"line":10,"column":78,"offset":244},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":167},"end":{"line":10,"column":78,"offset":244},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"방향(Directed Graph) : 일명 '비대칭' graph로, 한 vertex에서 다른 vertex로 방향이 정해진 edge가 존재","position":{"start":{"line":11,"column":4,"offset":248},"end":{"line":11,"column":80,"offset":324},"indent":[]}}],"position":{"start":{"line":11,"column":4,"offset":248},"end":{"line":11,"column":80,"offset":324},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":245},"end":{"line":12,"column":1,"offset":325},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"메소드 : .addNode(node), .contains(node), .removeNode(node), .hasEdge(fromNode, toNode), .addEdge(fromNode, toNode), .removeEdge(fromNode, toNode) 등","position":{"start":{"line":13,"column":3,"offset":328},"end":{"line":13,"column":148,"offset":473},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":328},"end":{"line":13,"column":148,"offset":473},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":326},"end":{"line":13,"column":148,"offset":473},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"구조 및 주요개념","position":{"start":{"line":14,"column":3,"offset":476},"end":{"line":14,"column":12,"offset":485},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":476},"end":{"line":14,"column":12,"offset":485},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":474},"end":{"line":15,"column":1,"offset":486},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Adjacent vertex(인접node) : edge에 의해 직접 연결된 vertex를 의미","position":{"start":{"line":16,"column":4,"offset":490},"end":{"line":16,"column":56,"offset":542},"indent":[]}}],"position":{"start":{"line":16,"column":4,"offset":490},"end":{"line":16,"column":56,"offset":542},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":487},"end":{"line":16,"column":56,"offset":542},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"degree(node차수) : UGraph에서, 인접한 vertex의 개수 → (모든 degree의 수) = (모든 edge의 수) ","position":{"start":{"line":17,"column":4,"offset":546},"end":{"line":17,"column":78,"offset":620},"indent":[]}},{"type":"text","value":"*","position":{"start":{"line":17,"column":78,"offset":620},"end":{"line":17,"column":80,"offset":622},"indent":[]}},{"type":"text","value":" 2","position":{"start":{"line":17,"column":80,"offset":622},"end":{"line":17,"column":82,"offset":624},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":546},"end":{"line":17,"column":82,"offset":624},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":543},"end":{"line":17,"column":82,"offset":624},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"in-degree(진입차수) : DGraph에서, 외부에서 오는 edge의 개수\nout-degree(진출차수) : DGraph에서, 외부로 향하는 edge의 개수\n→ (모든 in-degree의 수) = (모든 out-degree의 수) = (모든 edge의 수)","position":{"start":{"line":18,"column":4,"offset":628},"end":{"line":20,"column":59,"offset":780},"indent":[4,4]}}],"position":{"start":{"line":18,"column":4,"offset":628},"end":{"line":20,"column":59,"offset":780},"indent":[4,4]}}],"position":{"start":{"line":18,"column":1,"offset":625},"end":{"line":20,"column":59,"offset":780},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"weight(가중치) : edge에 부여되는 일종의 인덱스","position":{"start":{"line":21,"column":4,"offset":784},"end":{"line":21,"column":36,"offset":816},"indent":[]}}],"position":{"start":{"line":21,"column":4,"offset":784},"end":{"line":21,"column":36,"offset":816},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":781},"end":{"line":21,"column":36,"offset":816},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"path-length(경로길이) : 경로를 구성하는데 사용된 edge의 개수","position":{"start":{"line":22,"column":4,"offset":820},"end":{"line":22,"column":46,"offset":862},"indent":[]}}],"position":{"start":{"line":22,"column":4,"offset":820},"end":{"line":22,"column":46,"offset":862},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":817},"end":{"line":22,"column":46,"offset":862},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"simple path(단순경로) : 경로 중에서 반복되는 vertex가 없는 경우를 의미","position":{"start":{"line":23,"column":4,"offset":866},"end":{"line":23,"column":53,"offset":915},"indent":[]}}],"position":{"start":{"line":23,"column":4,"offset":866},"end":{"line":23,"column":53,"offset":915},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":863},"end":{"line":23,"column":53,"offset":915},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"cycle(순환) : 단순경로일 때, 시작 vertex와 종료 vertex가 동일한 경우를 의미","position":{"start":{"line":24,"column":4,"offset":919},"end":{"line":24,"column":57,"offset":972},"indent":[]}}],"position":{"start":{"line":24,"column":4,"offset":919},"end":{"line":24,"column":57,"offset":972},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":916},"end":{"line":25,"column":1,"offset":973},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"구현방식","position":{"start":{"line":26,"column":3,"offset":976},"end":{"line":26,"column":7,"offset":980},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":976},"end":{"line":26,"column":7,"offset":980},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":974},"end":{"line":27,"column":1,"offset":981},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Adjacent List(인접리스트) : vertex를 key로 하여 인접node들을 list에 저장하는 방식","position":{"start":{"line":28,"column":4,"offset":985},"end":{"line":28,"column":65,"offset":1046},"indent":[]}}],"position":{"start":{"line":28,"column":4,"offset":985},"end":{"line":28,"column":65,"offset":1046},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":982},"end":{"line":29,"column":1,"offset":1047},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"공간복잡도 = V + E → 즉, 인접리스트를 구현하려면 메모리가 최대 V+E만큼 필요","position":{"start":{"line":30,"column":3,"offset":1050},"end":{"line":30,"column":51,"offset":1098},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":1050},"end":{"line":30,"column":51,"offset":1098},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1048},"end":{"line":30,"column":51,"offset":1098},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"따라서 vertex의 추가, 삭제, 탐색에 유리하다.","position":{"start":{"line":31,"column":3,"offset":1101},"end":{"line":31,"column":32,"offset":1130},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":1101},"end":{"line":31,"column":32,"offset":1130},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1099},"end":{"line":32,"column":1,"offset":1131},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Adjacent Matrix(인접행렬) : 행렬의 각 element들이 두 vertex 간 연결을 나타냄","position":{"start":{"line":33,"column":4,"offset":1135},"end":{"line":33,"column":62,"offset":1193},"indent":[]}}],"position":{"start":{"line":33,"column":4,"offset":1135},"end":{"line":33,"column":62,"offset":1193},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1132},"end":{"line":34,"column":1,"offset":1194},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"공간복잡도 = V * V → 즉, 인접행렬을 구현하려면 메모리가 최대 V*V만큼 필요","position":{"start":{"line":35,"column":3,"offset":1197},"end":{"line":35,"column":50,"offset":1244},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":1197},"end":{"line":35,"column":50,"offset":1244},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1195},"end":{"line":35,"column":50,"offset":1244},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"따라서 vertex의 '빈번한' 추가, 삭제, 탐색에 유리하다.","position":{"start":{"line":36,"column":3,"offset":1247},"end":{"line":36,"column":38,"offset":1282},"indent":[]}}],"position":{"start":{"line":36,"column":3,"offset":1247},"end":{"line":36,"column":38,"offset":1282},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1245},"end":{"line":36,"column":38,"offset":1282},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":33},"end":{"line":36,"column":38,"offset":1282},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Graph 생성 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Graph</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":38,"column":1,"offset":1284},"end":{"line":44,"column":4,"offset":1367},"indent":[1,1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Vertex(Node) 추가 메소드</span>\n<span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addNode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":46,"column":1,"offset":1369},"end":{"line":51,"column":4,"offset":1494},"indent":[1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Vertex(Node) 존재여부 확인 메소드</span>\n<span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">contains</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":53,"column":1,"offset":1496},"end":{"line":59,"column":4,"offset":1635},"indent":[1,1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Vertex(Node) 삭제 메소드</span>\n<span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">removeNode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 먼저 삭제하려는 Vertex의 edge도 삭제해야 한다.</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> vtx <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeEdge</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> vtx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":61,"column":1,"offset":1637},"end":{"line":73,"column":4,"offset":1889},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 두 Vertex(Node)가 연결되었는지 확인 메소드</span>\n<span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">hasEdge</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fromNode<span class=\"token punctuation\">,</span> toNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> vtx <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>fromNode<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vtx <span class=\"token operator\">===</span> toNode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":75,"column":1,"offset":1891},"end":{"line":83,"column":4,"offset":2082},"indent":[1,1,1,1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 두 Vertex(Node) 연결 메소드</span>\n<span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addEdge</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fromNode<span class=\"token punctuation\">,</span> toNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>fromNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>toNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nodes<span class=\"token punctuation\">[</span>toNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fromNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":85,"column":1,"offset":2084},"end":{"line":91,"column":4,"offset":2252},"indent":[1,1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 두 Vertex(Node) 연결 삭제 메소드</span>\n<span class=\"token class-name\">Graph</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">removeEdge</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fromNode<span class=\"token punctuation\">,</span> toNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">[</span>fromNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>toNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">[</span>toNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>fromNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":93,"column":1,"offset":2254},"end":{"line":99,"column":4,"offset":2424},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Tree","position":{"start":{"line":101,"column":5,"offset":2430},"end":{"line":101,"column":9,"offset":2434},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":2426},"end":{"line":101,"column":9,"offset":2434},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Tree : Node로 구성된 계층적 자료구조로, root를 만들고 child를 추가하고 또 child를 추가하여 만든다.","position":{"start":{"line":103,"column":3,"offset":2438},"end":{"line":103,"column":71,"offset":2506},"indent":[]}}],"position":{"start":{"line":103,"column":3,"offset":2438},"end":{"line":103,"column":71,"offset":2506},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":2436},"end":{"line":103,"column":71,"offset":2506},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"구조 및 주요개념","position":{"start":{"line":104,"column":3,"offset":2509},"end":{"line":104,"column":12,"offset":2518},"indent":[]}}],"position":{"start":{"line":104,"column":3,"offset":2509},"end":{"line":104,"column":12,"offset":2518},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":2507},"end":{"line":105,"column":1,"offset":2519},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"height : tree의 전체 depth의 개수","position":{"start":{"line":106,"column":4,"offset":2523},"end":{"line":106,"column":31,"offset":2550},"indent":[]}}],"position":{"start":{"line":106,"column":4,"offset":2523},"end":{"line":106,"column":31,"offset":2550},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":2520},"end":{"line":106,"column":31,"offset":2550},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"depth : root까지의 depth의 개수","position":{"start":{"line":107,"column":4,"offset":2554},"end":{"line":107,"column":29,"offset":2579},"indent":[]}}],"position":{"start":{"line":107,"column":4,"offset":2554},"end":{"line":107,"column":29,"offset":2579},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":2551},"end":{"line":108,"column":1,"offset":2580},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Graph와 Tree 비교","position":{"start":{"line":109,"column":3,"offset":2583},"end":{"line":109,"column":17,"offset":2597},"indent":[]}}],"position":{"start":{"line":109,"column":3,"offset":2583},"end":{"line":109,"column":17,"offset":2597},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":2581},"end":{"line":109,"column":17,"offset":2597},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":2436},"end":{"line":109,"column":17,"offset":2597},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.notion.so/e2e8394cb10c43a4ab53f24ff7f0646b","children":[{"type":"text","value":"Untitled","position":{"start":{"line":111,"column":2,"offset":2600},"end":{"line":111,"column":10,"offset":2608},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":2599},"end":{"line":111,"column":67,"offset":2665},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":2599},"end":{"line":111,"column":67,"offset":2665},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"메소드 : .insertNode(value), .contains(value) 등","position":{"start":{"line":113,"column":3,"offset":2669},"end":{"line":113,"column":47,"offset":2713},"indent":[]}}],"position":{"start":{"line":113,"column":3,"offset":2669},"end":{"line":113,"column":47,"offset":2713},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":2667},"end":{"line":113,"column":47,"offset":2713},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":2667},"end":{"line":113,"column":47,"offset":2713},"indent":[]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":115,"column":1,"offset":2715},"end":{"line":122,"column":4,"offset":2819},"indent":[1,1,1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">insertNode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":124,"column":1,"offset":2821},"end":{"line":128,"column":4,"offset":2924},"indent":[1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">contains</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> child <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":130,"column":1,"offset":2926},"end":{"line":138,"column":4,"offset":3130},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Binary Search Tree","position":{"start":{"line":140,"column":5,"offset":3136},"end":{"line":140,"column":23,"offset":3154},"indent":[]}}],"position":{"start":{"line":140,"column":1,"offset":3132},"end":{"line":140,"column":23,"offset":3154},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"BST : Node가 최대 2개의 child를 가지며, node의 크기는 반드시 Left child < Parent < Right child 이다.","position":{"start":{"line":142,"column":3,"offset":3158},"end":{"line":142,"column":85,"offset":3240},"indent":[]}}],"position":{"start":{"line":142,"column":3,"offset":3158},"end":{"line":142,"column":85,"offset":3240},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":3156},"end":{"line":142,"column":85,"offset":3240},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"BST의 종류","position":{"start":{"line":143,"column":3,"offset":3243},"end":{"line":143,"column":10,"offset":3250},"indent":[]}}],"position":{"start":{"line":143,"column":3,"offset":3243},"end":{"line":143,"column":10,"offset":3250},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":3241},"end":{"line":144,"column":1,"offset":3251},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Complete Binary Tree(완전이진트리) : Leaf node가 왼쪽이 채워진 것","position":{"start":{"line":145,"column":4,"offset":3255},"end":{"line":145,"column":55,"offset":3306},"indent":[]}}],"position":{"start":{"line":145,"column":4,"offset":3255},"end":{"line":145,"column":55,"offset":3306},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":3252},"end":{"line":145,"column":55,"offset":3306},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Full Binary Tree(전이진트리) : 모든 node가 0 아니면 2개의 child를 가지는 것","position":{"start":{"line":146,"column":4,"offset":3310},"end":{"line":146,"column":61,"offset":3367},"indent":[]}}],"position":{"start":{"line":146,"column":4,"offset":3310},"end":{"line":146,"column":61,"offset":3367},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":3307},"end":{"line":146,"column":61,"offset":3367},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Perfect Binary Tree(포화이진트리) : Leaf node를 제외하고 모든 node가 2개의 child로 꽉 차있는 것\n→ P이진트리에서 node의 수는 정확히 2^(height - 1) 개이다.","position":{"start":{"line":147,"column":4,"offset":3371},"end":{"line":148,"column":46,"offset":3490},"indent":[4]}}],"position":{"start":{"line":147,"column":4,"offset":3371},"end":{"line":148,"column":46,"offset":3490},"indent":[4]}}],"position":{"start":{"line":147,"column":1,"offset":3368},"end":{"line":149,"column":1,"offset":3491},"indent":[1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"BST에서의 DFS","position":{"start":{"line":150,"column":3,"offset":3494},"end":{"line":150,"column":13,"offset":3504},"indent":[]}}],"position":{"start":{"line":150,"column":3,"offset":3494},"end":{"line":150,"column":13,"offset":3504},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":3492},"end":{"line":151,"column":1,"offset":3505},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Pre-order(전위탐색) : root 기준 가장 Left Parent의 Left child의 Left...에서 탐색시작(top-down)","position":{"start":{"line":152,"column":4,"offset":3509},"end":{"line":152,"column":82,"offset":3587},"indent":[]}}],"position":{"start":{"line":152,"column":4,"offset":3509},"end":{"line":152,"column":82,"offset":3587},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":3506},"end":{"line":152,"column":82,"offset":3587},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"In-order(중위탐색) : 가장 Left child인 Leaf에서 탐색시작(bottom-up)","position":{"start":{"line":153,"column":4,"offset":3591},"end":{"line":153,"column":58,"offset":3645},"indent":[]}}],"position":{"start":{"line":153,"column":4,"offset":3591},"end":{"line":153,"column":58,"offset":3645},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":3588},"end":{"line":153,"column":58,"offset":3645},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Post-order(후위탐색) : 가장 Left chil인 Leaf에서 탐색시작","position":{"start":{"line":154,"column":4,"offset":3649},"end":{"line":154,"column":48,"offset":3693},"indent":[]}}],"position":{"start":{"line":154,"column":4,"offset":3649},"end":{"line":154,"column":48,"offset":3693},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":3646},"end":{"line":155,"column":1,"offset":3694},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"시간복잡도 : node 추가/삭제/탐색 모두에서 O(h)","position":{"start":{"line":156,"column":3,"offset":3697},"end":{"line":156,"column":34,"offset":3728},"indent":[]}}],"position":{"start":{"line":156,"column":3,"offset":3697},"end":{"line":156,"column":34,"offset":3728},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":3695},"end":{"line":156,"column":34,"offset":3728},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":3156},"end":{"line":156,"column":34,"offset":3728},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySearchTreeNode</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":158,"column":1,"offset":3730},"end":{"line":166,"column":4,"offset":3867},"indent":[1,1,1,1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token class-name\">BinarySearchTreeNode</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">insert</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// value가 부모보다 작은 경우</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySearchTreeNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// value가 부모보다 큰 경우</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BinarySearchTreeNode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":168,"column":1,"offset":3869},"end":{"line":181,"column":4,"offset":4246},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token class-name\">BinarySearchTreeNode</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">contains</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// value가 부모에서 바로 일치하는 경우</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// value가 부모보다 작은 경우</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// value가 부모보다 큰 경우</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":183,"column":1,"offset":4248},"end":{"line":199,"column":4,"offset":4692},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"jsx","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token class-name\">BinarySearchTreeNode</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">inorder</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 항상 this.left -> 부모(this.value) -> this.right로 순회하는 함수 생성</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":201,"column":1,"offset":4694},"end":{"line":208,"column":4,"offset":4950},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":209,"column":1,"offset":4951}}}}