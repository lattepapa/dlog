{"expireTime":9007200857059810000,"key":"transformer-remark-markdown-html-ast-c8818afa28fb396ec78cdbe188fe78dc-gatsby-remark-katexgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Data Structure(2)","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":20,"offset":20}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":20,"offset":20}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Linked List","position":{"start":{"line":4,"column":5,"offset":26},"end":{"line":4,"column":16,"offset":37}}}],"position":{"start":{"line":4,"column":1,"offset":22},"end":{"line":4,"column":16,"offset":37}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Linked List : data와 ","position":{"start":{"line":6,"column":3,"offset":41},"end":{"line":6,"column":23,"offset":61}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"pointer","position":{"start":{"line":6,"column":25,"offset":63},"end":{"line":6,"column":32,"offset":70}}}],"position":{"start":{"line":6,"column":23,"offset":61},"end":{"line":6,"column":34,"offset":72}}},{"type":"text","value":"로 구성된 node가 선형(linear) ","position":{"start":{"line":6,"column":34,"offset":72},"end":{"line":6,"column":57,"offset":95}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"연결","position":{"start":{"line":6,"column":59,"offset":97},"end":{"line":6,"column":61,"offset":99}}}],"position":{"start":{"line":6,"column":57,"offset":95},"end":{"line":6,"column":63,"offset":101}}},{"type":"text","value":"을 구성함으로써 데이터 구조를 만든 것","position":{"start":{"line":6,"column":63,"offset":101},"end":{"line":6,"column":84,"offset":122}}}],"position":{"start":{"line":6,"column":1,"offset":39},"end":{"line":6,"column":84,"offset":122}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"장점 : 배열에 비해 data의 추가나 삭제가 매우 빠르고 메모리를 운용하는 방식은 상대적으로 효율적이다.","position":{"start":{"line":7,"column":3,"offset":125},"end":{"line":7,"column":62,"offset":184}}}],"position":{"start":{"line":7,"column":1,"offset":123},"end":{"line":7,"column":62,"offset":184}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"단점 : 배열에 비해 탐색과 정렬에 매우 느리고, 기본적으로 pointer만큼의 추가 메모리 소모가 있다.","position":{"start":{"line":8,"column":3,"offset":187},"end":{"line":8,"column":62,"offset":246}}}],"position":{"start":{"line":8,"column":1,"offset":185},"end":{"line":8,"column":62,"offset":246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"예시 : FAT32 파일시스템, 지하철 운행(이번역은... 다음역은 ...), Ctrl+Z의 사용(실행취소), 이미지뷰어 등","position":{"start":{"line":9,"column":3,"offset":249},"end":{"line":9,"column":72,"offset":318}}}],"position":{"start":{"line":9,"column":1,"offset":247},"end":{"line":9,"column":72,"offset":318}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"원하는 node를 찾으려면 앞에서부터 순차탐색 해야하기 때문에, 각 노드의 탐색 속도는 자신의 순서와 같다. 따라서 탐색 시간 복잡도는 O(n)이다. 한편, 첫번째 node의 추가/삭제는 O(1)의 시간복잡도를 갖지만, 이후의 임의 node의 추가/삭제 시간복잡도도 O(n)에 근접한다.","position":{"start":{"line":10,"column":3,"offset":321},"end":{"line":10,"column":163,"offset":481}}}],"position":{"start":{"line":10,"column":1,"offset":319},"end":{"line":10,"column":163,"offset":481}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"메소드 : .addToTail(data), .remove(data), .indexOf(data), .contains(data), .getNodeAt(index) 등","position":{"start":{"line":11,"column":3,"offset":484},"end":{"line":11,"column":94,"offset":575}}}],"position":{"start":{"line":11,"column":1,"offset":482},"end":{"line":11,"column":94,"offset":575}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"구조 : (head) → (node) → (node) → ... → (node) → (tail) → Null","position":{"start":{"line":12,"column":3,"offset":578},"end":{"line":12,"column":63,"offset":638}}}],"position":{"start":{"line":12,"column":1,"offset":576},"end":{"line":13,"column":1,"offset":639}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"head : 첫번째 node를 가리키는 순수 pointer이다. 빈 List라면 head가 바로 Null을 가리키게 된다.","position":{"start":{"line":14,"column":4,"offset":643},"end":{"line":14,"column":72,"offset":711}}}],"position":{"start":{"line":14,"column":1,"offset":640},"end":{"line":14,"column":72,"offset":711}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"node : data를 갖으면서 다음 node를 가리키는 pointer도 함께 갖는다.","position":{"start":{"line":15,"column":4,"offset":715},"end":{"line":15,"column":52,"offset":763}}}],"position":{"start":{"line":15,"column":1,"offset":712},"end":{"line":15,"column":52,"offset":763}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"tail : Time Complex를 줄여서 node별 data들을 잘 CRUD하기 위한 일종의 편의개념이다.","position":{"start":{"line":16,"column":4,"offset":767},"end":{"line":16,"column":65,"offset":828}}}],"position":{"start":{"line":16,"column":1,"offset":764},"end":{"line":17,"column":1,"offset":829}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"종류","position":{"start":{"line":18,"column":3,"offset":832},"end":{"line":18,"column":5,"offset":834}}}],"position":{"start":{"line":18,"column":1,"offset":830},"end":{"line":19,"column":1,"offset":835}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Singly Linked List : 각 node에 pointer가 1개 → previous node 확인 불가","position":{"start":{"line":20,"column":4,"offset":839},"end":{"line":20,"column":66,"offset":901}}}],"position":{"start":{"line":20,"column":1,"offset":836},"end":{"line":20,"column":66,"offset":901}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Doubly Linked List : 각 node에 pointer가 2개 → next, previous node 모두 확인 가능","position":{"start":{"line":21,"column":4,"offset":905},"end":{"line":21,"column":75,"offset":976}}}],"position":{"start":{"line":21,"column":1,"offset":902},"end":{"line":21,"column":75,"offset":976}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Circular Linked List : 마지막 node가 Null이 아니라 첫번째 node를 가리키도록 하여 Loop 형성","position":{"start":{"line":22,"column":4,"offset":980},"end":{"line":22,"column":73,"offset":1049}}}],"position":{"start":{"line":22,"column":1,"offset":977},"end":{"line":22,"column":73,"offset":1049}}},{"type":"text","value":"\n"}],"position":{"start":{"line":6,"column":1,"offset":39},"end":{"line":22,"column":73,"offset":1049}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Node 생성 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Linked List 생성 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":24,"column":1,"offset":1051},"end":{"line":41,"column":4,"offset":1291}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// AddtoTail 메소드</span>\n<span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addToTail</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> add <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 만약 head가 가리키는 node가 없다면, 즉, Linked List가 비어있다면</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// tail 위치에 node를 삽입할때 node 자체와 pointer에 동일하게 node를 대입</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":43,"column":1,"offset":1293},"end":{"line":60,"column":4,"offset":1656}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Remove 메소드</span>\n<span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> pre<span class=\"token punctuation\">;</span> <span class=\"token comment\">// current의 이전(previous) 노드</span>\n\n  <span class=\"token comment\">// 만약 current node에서 바로 삭제할 data를 찾았다면</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 바로 못찾았다면 next node로 계속 탐색해야 함</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>data <span class=\"token operator\">!==</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pre <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n    current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  pre<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":62,"column":1,"offset":1658},"end":{"line":79,"column":4,"offset":2060}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// getNodeAt 메소드</span>\n<span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getNodeAt</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// next node로 계속 탐색해야 함</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">===</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span>\n    current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":81,"column":1,"offset":2062},"end":{"line":95,"column":4,"offset":2347}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// contains 메소드</span>\n<span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">contains</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// next node로 계속 탐색해야 함</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":97,"column":1,"offset":2349},"end":{"line":109,"column":4,"offset":2594}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// indexOf 메소드</span>\n<span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">indexOf</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// next node로 계속 탐색해야 함</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">;</span>\n    current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":111,"column":1,"offset":2596},"end":{"line":125,"column":4,"offset":2867}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Hash Table","position":{"start":{"line":127,"column":5,"offset":2873},"end":{"line":127,"column":15,"offset":2883}}}],"position":{"start":{"line":127,"column":1,"offset":2869},"end":{"line":127,"column":15,"offset":2883}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Hashing : 특정 data(=key)를 고정된 형식의 data(=index)로 변환하여 bucket에 연결하는 것","position":{"start":{"line":129,"column":3,"offset":2887},"end":{"line":129,"column":69,"offset":2953}}}],"position":{"start":{"line":129,"column":1,"offset":2885},"end":{"line":129,"column":69,"offset":2953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"bucket : index에 연결된 일종의 객체로, { key: value(난수와 같은 주소정보) } 로 생각하면 된다.","position":{"start":{"line":130,"column":3,"offset":2956},"end":{"line":130,"column":70,"offset":3023}}}],"position":{"start":{"line":130,"column":1,"offset":2954},"end":{"line":130,"column":70,"offset":3023}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"tuple : 배열과 동일하나, 배열과 달리 element를 수정할 수 없는 것을 의미","position":{"start":{"line":131,"column":3,"offset":3026},"end":{"line":131,"column":51,"offset":3074}}}],"position":{"start":{"line":131,"column":1,"offset":3024},"end":{"line":131,"column":51,"offset":3074}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"장점 : hashing된 키를 바탕으로 인덱스를 검색하기 때문에 data의 추가, 삭제 및 탐색이 아주 쉽고 빠르다.","position":{"start":{"line":132,"column":3,"offset":3077},"end":{"line":132,"column":68,"offset":3142}}}],"position":{"start":{"line":132,"column":1,"offset":3075},"end":{"line":133,"column":1,"offset":3143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Load Factor : 해시테이블 크기의 25 ~ 75%를 최적상태로 하며, 자동으로 크기가 조절되도록 할 수 있다.","position":{"start":{"line":134,"column":3,"offset":3146},"end":{"line":134,"column":69,"offset":3212}}}],"position":{"start":{"line":134,"column":1,"offset":3144},"end":{"line":135,"column":1,"offset":3213}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"단점 : 해시함수 사용을 위한 추가 연산 필요, 해시테이블 크기 유한(공간효율성낮음), 해시충돌 리스크 상존\n또한, 해시 충돌에 연결 리스트를 사용하는 방식으로 대응한다면 캐시 효율이 떨어진다.","position":{"start":{"line":136,"column":3,"offset":3216},"end":{"line":137,"column":50,"offset":3326}}}],"position":{"start":{"line":136,"column":1,"offset":3214},"end":{"line":137,"column":50,"offset":3326}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"예시 : 전화번호부, 암호화(MD5, SHA256 등), 블록체인, DNS resolution(즉, V8엔진에 URL 주소입력 시)","position":{"start":{"line":138,"column":3,"offset":3329},"end":{"line":138,"column":76,"offset":3402}}}],"position":{"start":{"line":138,"column":1,"offset":3327},"end":{"line":138,"column":76,"offset":3402}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"충돌이 없다면 추가/삭제의 시간복잡도는 O(1)이지만, 충돌이 많아질수록 O(n)에 수렴하게 된다.","position":{"start":{"line":139,"column":3,"offset":3405},"end":{"line":139,"column":58,"offset":3460}}}],"position":{"start":{"line":139,"column":1,"offset":3403},"end":{"line":139,"column":58,"offset":3460}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"충돌(Collision)을 극복하는 방법:","position":{"start":{"line":140,"column":3,"offset":3463},"end":{"line":140,"column":26,"offset":3486}}}],"position":{"start":{"line":140,"column":1,"offset":3461},"end":{"line":141,"column":1,"offset":3487}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Open Addressing : { key: value }를 넣고자 하는 인덱스에 이미 값이 있다면 회피하는 방법","position":{"start":{"line":142,"column":4,"offset":3491},"end":{"line":142,"column":67,"offset":3554}}}],"position":{"start":{"line":142,"column":1,"offset":3488},"end":{"line":143,"column":1,"offset":3555}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"선형탐사 : n번 인덱스에 넣어야 하는데 이미 값이 있다면 n+1번 인덱스가 비었는지 확인","position":{"start":{"line":144,"column":3,"offset":3558},"end":{"line":144,"column":53,"offset":3608}}}],"position":{"start":{"line":144,"column":1,"offset":3556},"end":{"line":144,"column":53,"offset":3608}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"이중해시 : 해시함수를 2개 만들어놓고 평소에는 한개만 사용하다가, 충돌 시 남은 한개로 새 인덱스 도출","position":{"start":{"line":145,"column":3,"offset":3611},"end":{"line":145,"column":61,"offset":3669}}}],"position":{"start":{"line":145,"column":1,"offset":3609},"end":{"line":146,"column":1,"offset":3670}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Close Addressing : 인덱스에 이미 값이 있더라도 해당 인덱스에 저장하는 방법","position":{"start":{"line":147,"column":4,"offset":3674},"end":{"line":147,"column":54,"offset":3724}}}],"position":{"start":{"line":147,"column":1,"offset":3671},"end":{"line":148,"column":1,"offset":3725}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Bucket : 해당 인덱스가 다시 여러 인덱스를 갖는 배열이 되어(Matrix), 충돌된 것을 거기에 쌓는다.","position":{"start":{"line":149,"column":3,"offset":3728},"end":{"line":149,"column":65,"offset":3790}}}],"position":{"start":{"line":149,"column":1,"offset":3726},"end":{"line":149,"column":65,"offset":3790}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Chaining : 해당 인덱스에 충돌된 것들을 Linked List로 연결하여 구현한다!!","position":{"start":{"line":150,"column":3,"offset":3793},"end":{"line":150,"column":54,"offset":3844}}}],"position":{"start":{"line":150,"column":1,"offset":3791},"end":{"line":150,"column":54,"offset":3844}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"메소드 : .insert(key, value), .retrieve(key), .remove(key), .resize(newLimit) 등","position":{"start":{"line":151,"column":3,"offset":3847},"end":{"line":151,"column":79,"offset":3923}}}],"position":{"start":{"line":151,"column":1,"offset":3845},"end":{"line":151,"column":79,"offset":3923}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"구조 : key(\"Adam Smith\") → (hash function) → bucket(","position":{"start":{"line":152,"column":3,"offset":3926},"end":{"line":152,"column":53,"offset":3976}}},{"type":"text","value":"[ { \"Adam Smith\" : 031-2134 }, { }, ...]","position":{"start":{"line":152,"column":54,"offset":3977},"end":{"line":152,"column":92,"offset":4015}}},{"type":"text","value":") → (hash table)","position":{"start":{"line":152,"column":93,"offset":4016},"end":{"line":152,"column":109,"offset":4032}}}],"position":{"start":{"line":152,"column":1,"offset":3924},"end":{"line":152,"column":109,"offset":4032}}},{"type":"text","value":"\n"}],"position":{"start":{"line":129,"column":1,"offset":2885},"end":{"line":152,"column":109,"offset":4032}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 해시값(hash value) 생성함수</span>\n<span class=\"token comment\">// 어떠한 key를, 그것을 표징하는 인덱스(해시값)로 변환하는 역할</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hashFunction</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> max</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> hash <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hash <span class=\"token operator\">&amp;=</span> hash<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Convert to 32bit integer</span>\n    hash <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> hash <span class=\"token operator\">%</span> max<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":154,"column":1,"offset":4034},"end":{"line":166,"column":4,"offset":4360}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 해시테이블에 값(tuple) 저장</span>\n<span class=\"token comment\">// 해시값 생성함수를 통해 생성된 인덱스에, key-value 튜플을 연관시켜 저장하는 역할</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">LimitedArray</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">limit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> limitedArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  limitedArray<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">checkLimit</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> storage<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  limitedArray<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index<span class=\"token punctuation\">,</span> tuple</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">checkLimit</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    storage<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  limitedArray<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">each</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> storage<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>storage<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> storage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">checkLimit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> index <span class=\"token operator\">!==</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setter requires a numeric index for its first argument\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>limit <span class=\"token operator\">&lt;=</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error trying to access an over-the-limit index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> limitedArray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":168,"column":1,"offset":4362},"end":{"line":200,"column":4,"offset":5177}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 해시테이블 생성 템플릿</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HashTable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정하기 나름</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_storage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LimitedArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":202,"column":1,"offset":5179},"end":{"line":211,"column":4,"offset":5349}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 해시테이블에 key-value 튜플 추가하는 메소드</span>\n<span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">insert</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> tuple <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 튜플은 { key: value, 복숭아: 츄르 } 꼴이다.</span>\n\n  <span class=\"token comment\">// 이미 Hash Table에 key가 존재하는 경우</span>\n  <span class=\"token comment\">// 즉, Hash Table의 어떤 index에 해당 key-value 튜플이 이미 저장되어있는 경우</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_storage<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    tuple <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_storage<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tuple<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_storage<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  tuple<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_storage<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Hash Table size가 limit의 75%를 넘어가면, 2배의 size로 reHashing 해야한다.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit <span class=\"token operator\">></span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":213,"column":1,"offset":5351},"end":{"line":234,"column":4,"offset":5993}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 해시테이블에서 주어진 key의 value를 조회하는 메소드</span>\n<span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">retrieve</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 주어진 key가 해시테이블에 존재한다면</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_storage<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_storage<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":236,"column":1,"offset":5995},"end":{"line":245,"column":4,"offset":6258}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 해시테이블 내 튜플 삭제 메소드</span>\n<span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">remove</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token function\">hashFunction</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 주어진 key가 해시테이블에 존재한다면</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_storage<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_storage<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// size가 limit의 25%도 안되면 limit의 절반으로 해시테이블을 resize 해야한다</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size <span class=\"token operator\">/</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.25</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit <span class=\"token operator\">*</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":247,"column":1,"offset":6260},"end":{"line":263,"column":4,"offset":6670}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 해시테이블에 대한 Re-Hashing 메소드</span>\n<span class=\"token class-name\">HashTable</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_resize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">newLimit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// HashTable 클래스의 기존 storage 정보들을 일괄적으로 따로 빼놔야 한다.</span>\n  <span class=\"token keyword\">let</span> oldStorage <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_storage<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> oldLimit <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// newLimit에 기초한 HashTable 클래스 정보 재정립</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit <span class=\"token operator\">=</span> newLimit<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_storage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LimitedArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 기존 storage에 포함된 튜플들을 차례대로 하나씩 새 storage에 넣는다.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> oldLimit<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldStorage<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> oldStorage<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> oldStorage<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":265,"column":1,"offset":6672},"end":{"line":286,"column":4,"offset":7271}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Stack과 Linked List가 섞인 문제","position":{"start":{"line":288,"column":5,"offset":7277},"end":{"line":288,"column":30,"offset":7302}}}],"position":{"start":{"line":288,"column":1,"offset":7273},"end":{"line":288,"column":30,"offset":7302}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"(head) 1 → 2 → 3 → 4 → 5 → 6 (tail)과 같이 저장된 Linked List가 있다. 주어진 함수가 아래와 같을 때, ","position":{"start":{"line":290,"column":3,"offset":7306},"end":{"line":290,"column":82,"offset":7385}}},{"type":"raw","value":"<code class=\"language-text\">alternatePrint(head)</code>","position":{"start":{"line":290,"column":82,"offset":7385},"end":{"line":290,"column":104,"offset":7407}}},{"type":"text","value":"의 결과는?","position":{"start":{"line":290,"column":104,"offset":7407},"end":{"line":290,"column":110,"offset":7413}}}],"position":{"start":{"line":290,"column":1,"offset":7304},"end":{"line":290,"column":110,"offset":7413}}},{"type":"text","value":"\n"}],"position":{"start":{"line":290,"column":1,"offset":7304},"end":{"line":290,"column":110,"offset":7413}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">alternatePrint</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alternatePrint</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":292,"column":1,"offset":7415},"end":{"line":303,"column":4,"offset":7608}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"답은 1 - 3 - 5 - 5 - 3 - 1","position":{"start":{"line":305,"column":1,"offset":7610},"end":{"line":305,"column":25,"offset":7634}}}],"position":{"start":{"line":305,"column":1,"offset":7610},"end":{"line":305,"column":25,"offset":7634}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":306,"column":1,"offset":7635}}}}