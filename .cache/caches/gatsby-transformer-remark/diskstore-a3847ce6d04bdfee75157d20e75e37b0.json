{"expireTime":9007200857059810000,"key":"transformer-remark-markdown-html-ast-2fa0409baf41d32e2f3f0a99665c732b-gatsby-remark-katexgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"for 반복문","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":12,"offset":12}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":12,"offset":12}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\"The ","position":{"start":{"line":4,"column":3,"offset":16},"end":{"line":4,"column":8,"offset":21}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"for","position":{"start":{"line":4,"column":10,"offset":23},"end":{"line":4,"column":13,"offset":26}}}],"position":{"start":{"line":4,"column":8,"offset":21},"end":{"line":4,"column":15,"offset":28}}},{"type":"text","value":" statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.\" - ","position":{"start":{"line":4,"column":15,"offset":28},"end":{"line":4,"column":222,"offset":235}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for"},"children":[{"type":"text","value":"MDN","position":{"start":{"line":4,"column":223,"offset":236},"end":{"line":4,"column":226,"offset":239}}}],"position":{"start":{"line":4,"column":222,"offset":235},"end":{"line":4,"column":309,"offset":322}}}],"position":{"start":{"line":4,"column":3,"offset":16},"end":{"line":4,"column":309,"offset":322}}},{"type":"text","value":"\n"}],"position":{"start":{"line":4,"column":1,"offset":14},"end":{"line":4,"column":309,"offset":322}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"for","position":{"start":{"line":6,"column":3,"offset":326},"end":{"line":6,"column":6,"offset":329}}}],"position":{"start":{"line":6,"column":1,"offset":324},"end":{"line":6,"column":8,"offset":331}}},{"type":"text","value":" 반복문은 while과 그 목적과 쓰임이 거의 동일하다. for 반복문으로 표현 가능한 것 중 while 반복문으로 표현할 수 없는 것은 없다(vice versa). 중요한 것은, for 반복문을 사용해야 문제해결에 유리한 상황을 생각해내는 것이다. 일반적으로 for 반복문은 ","position":{"start":{"line":6,"column":8,"offset":331},"end":{"line":6,"column":163,"offset":486}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"배열","position":{"start":{"line":6,"column":165,"offset":488},"end":{"line":6,"column":167,"offset":490}}}],"position":{"start":{"line":6,"column":163,"offset":486},"end":{"line":6,"column":169,"offset":492}}},{"type":"text","value":"(Array)에 담긴 ","position":{"start":{"line":6,"column":169,"offset":492},"end":{"line":6,"column":181,"offset":504}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"각 요소","position":{"start":{"line":6,"column":183,"offset":506},"end":{"line":6,"column":187,"offset":510}}}],"position":{"start":{"line":6,"column":181,"offset":504},"end":{"line":6,"column":189,"offset":512}}},{"type":"text","value":"(element)들을 ","position":{"start":{"line":6,"column":189,"offset":512},"end":{"line":6,"column":201,"offset":524}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"순차적","position":{"start":{"line":6,"column":203,"offset":526},"end":{"line":6,"column":206,"offset":529}}}],"position":{"start":{"line":6,"column":201,"offset":524},"end":{"line":6,"column":208,"offset":531}}},{"type":"text","value":"(by index)으로 다루고자 할 때 유용하다. 아래의 for 반복문 문법을 보면 그 이유를 알 수 있다.","position":{"start":{"line":6,"column":208,"offset":531},"end":{"line":6,"column":268,"offset":591}}}],"position":{"start":{"line":6,"column":1,"offset":324},"end":{"line":6,"column":268,"offset":591}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arrayName<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  array를 제어할 명령 <span class=\"token function\">내용</span><span class=\"token punctuation\">(</span>statement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":8,"column":1,"offset":593},"end":{"line":12,"column":4,"offset":679}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"만약 위와 같은 세밀한 요소 인덱스 정보의 제어까지는 필요없고, 단지 순차적으로 요소들 자체에 대해 제어하고자 한다면 아래와 같이 표현하는 것도 가능하다.","position":{"start":{"line":14,"column":1,"offset":681},"end":{"line":14,"column":87,"offset":767}}}],"position":{"start":{"line":14,"column":1,"offset":681},"end":{"line":14,"column":87,"offset":767}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> elementName <span class=\"token keyword\">of</span> arrayName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  element를 제어할 명령 <span class=\"token function\">내용</span><span class=\"token punctuation\">(</span>statement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":16,"column":1,"offset":769},"end":{"line":20,"column":4,"offset":849}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"한편, 배열뿐만 아니라 ","position":{"start":{"line":22,"column":1,"offset":851},"end":{"line":22,"column":14,"offset":864}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"객체","position":{"start":{"line":22,"column":16,"offset":866},"end":{"line":22,"column":18,"offset":868}}}],"position":{"start":{"line":22,"column":14,"offset":864},"end":{"line":22,"column":20,"offset":870}}},{"type":"text","value":"(Object)의 경우에도 for 반복문을 통한 제어가 가능하다. 이때 제어의 대상은 객체가 가진 ","position":{"start":{"line":22,"column":20,"offset":870},"end":{"line":22,"column":75,"offset":925}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"속성","position":{"start":{"line":22,"column":77,"offset":927},"end":{"line":22,"column":79,"offset":929}}}],"position":{"start":{"line":22,"column":75,"offset":925},"end":{"line":22,"column":81,"offset":931}}},{"type":"text","value":"(property)의 ","position":{"start":{"line":22,"column":81,"offset":931},"end":{"line":22,"column":93,"offset":943}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"키","position":{"start":{"line":22,"column":95,"offset":945},"end":{"line":22,"column":96,"offset":946}}}],"position":{"start":{"line":22,"column":93,"offset":943},"end":{"line":22,"column":98,"offset":948}}},{"type":"text","value":"(key)와 그것의 ","position":{"start":{"line":22,"column":98,"offset":948},"end":{"line":22,"column":109,"offset":959}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"키값","position":{"start":{"line":22,"column":111,"offset":961},"end":{"line":22,"column":113,"offset":963}}}],"position":{"start":{"line":22,"column":109,"offset":959},"end":{"line":22,"column":115,"offset":965}}},{"type":"text","value":"(value)이다.","position":{"start":{"line":22,"column":115,"offset":965},"end":{"line":22,"column":125,"offset":975}}}],"position":{"start":{"line":22,"column":1,"offset":851},"end":{"line":22,"column":125,"offset":975}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> keyName <span class=\"token keyword\">in</span> objectName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  key를 제어할 명령 <span class=\"token function\">내용</span><span class=\"token punctuation\">(</span>statement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":24,"column":1,"offset":977},"end":{"line":28,"column":4,"offset":1050}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>\n<br>","position":{"start":{"line":30,"column":1,"offset":1052},"end":{"line":32,"column":5,"offset":1066}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"1. 어떤 문장이든 제목칸에 입력하면 무조건 문장 내 단어의 맨 첫 글자는 대문자로 변환하여 제목으로 보여주고자 한다.","position":{"start":{"line":34,"column":6,"offset":1073},"end":{"line":34,"column":72,"offset":1139}}}],"position":{"start":{"line":34,"column":1,"offset":1068},"end":{"line":34,"column":72,"offset":1139}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">convertToTitle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// [더이상 쪼갤 수 없는 것] 단어끼리 묶음</span>\n  <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// [로직1] 요소(= 여기선 단어)가 존재하는 지 여부를 확인하여</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// [로직2] 존재할 경우에만 해당 요소의 첫번째 인덱스만 대문자로 하여 재 대입</span>\n      arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 최종값 리턴</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":36,"column":1,"offset":1141},"end":{"line":52,"column":4,"offset":1506}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>\n<br>","position":{"start":{"line":54,"column":1,"offset":1508},"end":{"line":56,"column":5,"offset":1522}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"2. 어떤 상품의 QR코드를 찍으면 이것으로부터 2차원 배열을 입력받아 각 배열을 이용해 만든 객체를 출력하려고 한다. 만들어진 객체를 DOM CRUD로 다듬어서 HTML 문서로까지 보여줄 것이다.","position":{"start":{"line":58,"column":6,"offset":1529},"end":{"line":58,"column":116,"offset":1639}}}],"position":{"start":{"line":58,"column":1,"offset":1524},"end":{"line":58,"column":116,"offset":1639}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">convertToObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// [더이상 쪼갤 수 없는 것] 객체의 속성에 key든 value든 아무 정보도 없는 것</span>\n  <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// [로직1] 객체의 속성인 i번째 요소가 빈 배열이 아니면서,</span>\n    <span class=\"token comment\">// [로직2] 아직 obj에 key 정보가 정해지지 않은 경우에만 obj에 속성 일체형성</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      obj<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 최종값 리턴</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":60,"column":1,"offset":1641},"end":{"line":76,"column":4,"offset":2023}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>\n<br>","position":{"start":{"line":78,"column":1,"offset":2025},"end":{"line":80,"column":5,"offset":2039}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"3. 문자열을 요소로 갖는 배열을 입력받아 가장 짧은 문자열과 가장 긴 문자열을 제거한 배열을 출력하려고 한다. 단, 모든 요소의 길이가 같은 경우는 배제하기로 하며, 길이가 동일한 요소들이 여러 개 있을 경우, 가장 마지막 요소는 제거한다.","position":{"start":{"line":82,"column":6,"offset":2046},"end":{"line":82,"column":141,"offset":2181}}}],"position":{"start":{"line":82,"column":1,"offset":2041},"end":{"line":82,"column":141,"offset":2181}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">eleminateExtremeElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// [더이상 쪼갤 수 없는 것] 최소길이가 20이거나, 최대길이가 0인 경우</span>\n  <span class=\"token keyword\">let</span> iamMaxLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> iamMinLength <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// [로직1] 위의 초기 최소길이, 초기 최대길이와 비교한 결과를 담을 곳 생성</span>\n  <span class=\"token keyword\">let</span> iamMaxIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> iamMinIdx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// [로직2] 요소의 길이를 최대길이와 비교 => 길면 그 길이와 인덱스값을 각각 저장</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> iamMaxLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      iamMaxLength <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n      iamMaxIdx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// [로직3] 요소의 길이를 최소길이와 비교 => 짧으면 그 길이와 인덱스값을 각각 저장</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> iamMinLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      iamMinLength <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n      iamMinIdx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// [로직4] 위의 반복문으로 나오는 최대/최소값 중, 어느 것도 아닌 인덱스 고르면 끝</span>\n  <span class=\"token keyword\">let</span> arrFinal <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!==</span> iamMaxIdx <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">!==</span> iamMinIdx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      arrFinal<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 최종값 리턴</span>\n  <span class=\"token keyword\">return</span> arrFinal<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":84,"column":1,"offset":2183},"end":{"line":119,"column":4,"offset":3017}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":120,"column":1,"offset":3018}}}}