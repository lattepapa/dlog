{"expireTime":9007200857059810000,"key":"transformer-remark-markdown-ast-6e2e91ba66fd6bc85c51c71b46286ee1-gatsby-remark-katexgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":3,"children":[{"type":"text","value":"함수의 범위(Scope)","position":{"start":{"line":2,"column":5,"offset":5},"end":{"line":2,"column":18,"offset":18},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":18,"offset":18},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"\"","position":{"start":{"line":4,"column":3,"offset":22},"end":{"line":4,"column":4,"offset":23},"indent":[]}},{"type":"emphasis","children":[{"type":"strong","children":[{"type":"text","value":"The current context of execution","position":{"start":{"line":4,"column":7,"offset":26},"end":{"line":4,"column":39,"offset":58},"indent":[]}}],"position":{"start":{"line":4,"column":5,"offset":24},"end":{"line":4,"column":41,"offset":60},"indent":[]}},{"type":"text","value":". The context in which values and expressions are \"visible\" or can be referenced. If a variable or other expression is not \"in the current scope,\" then it is unavailable for use. Scopes can also be layered in a hierarchy, so that ","position":{"start":{"line":4,"column":41,"offset":60},"end":{"line":4,"column":271,"offset":290},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"child scopes have access to parent scopes, but not vice versa","position":{"start":{"line":4,"column":273,"offset":292},"end":{"line":4,"column":334,"offset":353},"indent":[]}}],"position":{"start":{"line":4,"column":271,"offset":290},"end":{"line":4,"column":336,"offset":355},"indent":[]}},{"type":"text","value":".\nA function serves as a closure in JavaScript, and thus creates a scope, so that (for example) ","position":{"start":{"line":4,"column":336,"offset":355},"end":{"line":5,"column":97,"offset":453},"indent":[3]}},{"type":"strong","children":[{"type":"text","value":"a variable defined exclusively within the function cannot be accessed from outside the function","position":{"start":{"line":5,"column":99,"offset":455},"end":{"line":5,"column":194,"offset":550},"indent":[]}}],"position":{"start":{"line":5,"column":97,"offset":453},"end":{"line":5,"column":196,"offset":552},"indent":[]}},{"type":"text","value":" or within other functions. For instance, the following is invalid:","position":{"start":{"line":5,"column":196,"offset":552},"end":{"line":5,"column":263,"offset":619},"indent":[]}}],"position":{"start":{"line":4,"column":4,"offset":23},"end":{"line":5,"column":264,"offset":620},"indent":[3]}},{"type":"text","value":"\" - ","position":{"start":{"line":5,"column":264,"offset":620},"end":{"line":5,"column":268,"offset":624},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Scope","children":[{"type":"strong","children":[{"type":"text","value":"MDN","position":{"start":{"line":5,"column":271,"offset":627},"end":{"line":5,"column":274,"offset":630},"indent":[]}}],"position":{"start":{"line":5,"column":269,"offset":625},"end":{"line":5,"column":276,"offset":632},"indent":[]}}],"position":{"start":{"line":5,"column":268,"offset":624},"end":{"line":5,"column":334,"offset":690},"indent":[]}}],"position":{"start":{"line":4,"column":3,"offset":22},"end":{"line":5,"column":334,"offset":690},"indent":[3]}}],"position":{"start":{"line":4,"column":1,"offset":20},"end":{"line":5,"column":334,"offset":690},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"함수는 범위를 갖는다. 특히, MDN reference에서 확인할 수 있듯이, 함수 안에 함수가 존재할 경우, ","position":{"start":{"line":7,"column":1,"offset":692},"end":{"line":7,"column":63,"offset":754},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"내부함수는 그것을 포함하는 부모함수로의 접근이 가능","position":{"start":{"line":7,"column":65,"offset":756},"end":{"line":7,"column":93,"offset":784},"indent":[]}}],"position":{"start":{"line":7,"column":63,"offset":754},"end":{"line":7,"column":95,"offset":786},"indent":[]}},{"type":"text","value":"하지만, ","position":{"start":{"line":7,"column":95,"offset":786},"end":{"line":7,"column":100,"offset":791},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"부모함수는 자신의 내부에 있는 함수에는 접근할 수 없음","position":{"start":{"line":7,"column":102,"offset":793},"end":{"line":7,"column":132,"offset":823},"indent":[]}}],"position":{"start":{"line":7,"column":100,"offset":791},"end":{"line":7,"column":134,"offset":825},"indent":[]}},{"type":"text","value":"을 알 수 있다. 그리고 더 무서운 것은, ","position":{"start":{"line":7,"column":134,"offset":825},"end":{"line":7,"column":158,"offset":849},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"자바스크립트는 그 자체가 이미 함수","position":{"start":{"line":7,"column":160,"offset":851},"end":{"line":7,"column":179,"offset":870},"indent":[]}}],"position":{"start":{"line":7,"column":158,"offset":849},"end":{"line":7,"column":181,"offset":872},"indent":[]}},{"type":"text","value":"(!!)이기 때문에 자바스크립트 작성된 모든 함수들은 자바스크립트 자체의 내부함수가 된다. 이 말인즉슨, 우리가 어떤 함수를 선언했다면, 해당 함수는 바깥에 있는 변수들을 얼마든지 가져와서 활용할 수 있다는 의미이다. 즉,","position":{"start":{"line":7,"column":181,"offset":872},"end":{"line":7,"column":305,"offset":996},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":692},"end":{"line":7,"column":305,"offset":996},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greeting</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":9,"column":1,"offset":998},"end":{"line":14,"column":4,"offset":1084},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"이라고 작성된 자바스크립트 코드가 있다면, 이 ","position":{"start":{"line":16,"column":1,"offset":1086},"end":{"line":16,"column":27,"offset":1112},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">greeting</code>","position":{"start":{"line":16,"column":27,"offset":1112},"end":{"line":16,"column":37,"offset":1122},"indent":[]}},{"type":"text","value":" 함수에 그것의 외부변수인 ","position":{"start":{"line":16,"column":37,"offset":1122},"end":{"line":16,"column":52,"offset":1137},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">str</code>","position":{"start":{"line":16,"column":52,"offset":1137},"end":{"line":16,"column":57,"offset":1142},"indent":[]}},{"type":"text","value":"을 매개변수로 대입 및 활용할 수 있다는 의미이다. 즉, ","position":{"start":{"line":16,"column":57,"offset":1142},"end":{"line":16,"column":89,"offset":1174},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">greeting(str)</code>","position":{"start":{"line":16,"column":89,"offset":1174},"end":{"line":16,"column":104,"offset":1189},"indent":[]}},{"type":"text","value":"의 결과 ","position":{"start":{"line":16,"column":104,"offset":1189},"end":{"line":16,"column":109,"offset":1194},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">hello, world</code>","position":{"start":{"line":16,"column":109,"offset":1194},"end":{"line":16,"column":123,"offset":1208},"indent":[]}},{"type":"text","value":"가 console에 출력된다. 이때 ","position":{"start":{"line":16,"column":123,"offset":1208},"end":{"line":16,"column":143,"offset":1228},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">greeting</code>","position":{"start":{"line":16,"column":143,"offset":1228},"end":{"line":16,"column":153,"offset":1238},"indent":[]}},{"type":"text","value":"은 ","position":{"start":{"line":16,"column":153,"offset":1238},"end":{"line":16,"column":155,"offset":1240},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"지역범위(Local scope)","position":{"start":{"line":16,"column":157,"offset":1242},"end":{"line":16,"column":174,"offset":1259},"indent":[]}}],"position":{"start":{"line":16,"column":155,"offset":1240},"end":{"line":16,"column":176,"offset":1261},"indent":[]}},{"type":"text","value":"를 갖는다고 하고, ","position":{"start":{"line":16,"column":176,"offset":1261},"end":{"line":16,"column":187,"offset":1272},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">str</code>","position":{"start":{"line":16,"column":187,"offset":1272},"end":{"line":16,"column":192,"offset":1277},"indent":[]}},{"type":"text","value":" 변수는 ","position":{"start":{"line":16,"column":192,"offset":1277},"end":{"line":16,"column":197,"offset":1282},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"전역범위(Global scope)","position":{"start":{"line":16,"column":199,"offset":1284},"end":{"line":16,"column":217,"offset":1302},"indent":[]}}],"position":{"start":{"line":16,"column":197,"offset":1282},"end":{"line":16,"column":219,"offset":1304},"indent":[]}},{"type":"text","value":"에 놓여있다고 한다. 그런데 자바스크립트는 그 자체로 함수라고 했으므로, 자바스크립트로 작성한 모든 함수는 자바스크립트의 지역범위(local scope)에 해당한다.\n","position":{"start":{"line":16,"column":219,"offset":1304},"end":{"line":17,"column":1,"offset":1397},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":17,"column":1,"offset":1397},"end":{"line":17,"column":5,"offset":1401},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1086},"end":{"line":17,"column":5,"offset":1401},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"명령의 범위(Block)","position":{"start":{"line":19,"column":5,"offset":1407},"end":{"line":19,"column":18,"offset":1420},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1403},"end":{"line":19,"column":18,"offset":1420},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"\"","position":{"start":{"line":21,"column":3,"offset":1424},"end":{"line":21,"column":4,"offset":1425},"indent":[]}},{"type":"emphasis","children":[{"type":"strong","children":[{"type":"text","value":"A block statement","position":{"start":{"line":21,"column":7,"offset":1428},"end":{"line":21,"column":24,"offset":1445},"indent":[]}}],"position":{"start":{"line":21,"column":5,"offset":1426},"end":{"line":21,"column":26,"offset":1447},"indent":[]}},{"type":"text","value":" (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of braces (\"curly brackets\") and may optionally be labelled: ...(중략)... ","position":{"start":{"line":21,"column":26,"offset":1447},"end":{"line":21,"column":217,"offset":1638},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"It allows you to use multiple statements where JavaScript expects only one statement.","position":{"start":{"line":21,"column":219,"offset":1640},"end":{"line":21,"column":304,"offset":1725},"indent":[]}}],"position":{"start":{"line":21,"column":217,"offset":1638},"end":{"line":21,"column":306,"offset":1727},"indent":[]}},{"type":"text","value":" ...(중략)... Blocks are commonly used in association with if...else and for statements.","position":{"start":{"line":21,"column":306,"offset":1727},"end":{"line":21,"column":392,"offset":1813},"indent":[]}}],"position":{"start":{"line":21,"column":4,"offset":1425},"end":{"line":21,"column":393,"offset":1814},"indent":[]}},{"type":"text","value":"\" - ","position":{"start":{"line":21,"column":393,"offset":1814},"end":{"line":21,"column":397,"offset":1818},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block","children":[{"type":"strong","children":[{"type":"text","value":"MDN","position":{"start":{"line":21,"column":400,"offset":1821},"end":{"line":21,"column":403,"offset":1824},"indent":[]}}],"position":{"start":{"line":21,"column":398,"offset":1819},"end":{"line":21,"column":405,"offset":1826},"indent":[]}}],"position":{"start":{"line":21,"column":397,"offset":1818},"end":{"line":21,"column":490,"offset":1911},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":1424},"end":{"line":21,"column":490,"offset":1911},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":1422},"end":{"line":21,"column":490,"offset":1911},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"MDN reference를 통해 알 수 있는 것은, 자바스크립트에서는 ","position":{"start":{"line":23,"column":1,"offset":1913},"end":{"line":23,"column":40,"offset":1952},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"중괄호","position":{"start":{"line":23,"column":42,"offset":1954},"end":{"line":23,"column":45,"offset":1957},"indent":[]}}],"position":{"start":{"line":23,"column":40,"offset":1952},"end":{"line":23,"column":47,"offset":1959},"indent":[]}},{"type":"text","value":"(curly brackets, 즉, ","position":{"start":{"line":23,"column":47,"offset":1959},"end":{"line":23,"column":67,"offset":1979},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">{}</code>","position":{"start":{"line":23,"column":67,"offset":1979},"end":{"line":23,"column":71,"offset":1983},"indent":[]}},{"type":"text","value":")로 묶인 것은 마치 함수를 선언한 것과 같이 '범위'를 갖는 명령으로 간주한다는 것이다. 이것을 ","position":{"start":{"line":23,"column":71,"offset":1983},"end":{"line":23,"column":126,"offset":2038},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"블록","position":{"start":{"line":23,"column":128,"offset":2040},"end":{"line":23,"column":130,"offset":2042},"indent":[]}}],"position":{"start":{"line":23,"column":126,"offset":2038},"end":{"line":23,"column":132,"offset":2044},"indent":[]}},{"type":"text","value":"(block)이라고 한다. '블록' 개념을 '함수의 범위'에 종합하여 생각해본다면, 다음과 같은 규칙에 도달할 수 있다.","position":{"start":{"line":23,"column":132,"offset":2044},"end":{"line":23,"column":199,"offset":2111},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1913},"end":{"line":23,"column":199,"offset":2111},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"모든 함수는 범위(scope)를 갖는다.","position":{"start":{"line":25,"column":3,"offset":2115},"end":{"line":25,"column":25,"offset":2137},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":2115},"end":{"line":25,"column":25,"offset":2137},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2113},"end":{"line":25,"column":25,"offset":2137},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"내부함수는 외부함수의 변수에 접근할 수 있지만 외부함수는 내부함수에 접근할 수 없다.","position":{"start":{"line":26,"column":3,"offset":2140},"end":{"line":26,"column":50,"offset":2187},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":2140},"end":{"line":26,"column":50,"offset":2187},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":2138},"end":{"line":26,"column":50,"offset":2187},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"함수의 내부에 블록이 존재한다면 해당 블록은 명령이 진술된, 일종의 내부함수이다.","position":{"start":{"line":27,"column":3,"offset":2190},"end":{"line":27,"column":48,"offset":2235},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":2190},"end":{"line":27,"column":48,"offset":2235},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":2188},"end":{"line":27,"column":48,"offset":2235},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":2113},"end":{"line":27,"column":48,"offset":2235},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"이러한 규칙을 토대로 아래의 예제를 살펴보자. 첫번째 스크립트는 함수 ","position":{"start":{"line":29,"column":1,"offset":2237},"end":{"line":29,"column":40,"offset":2276},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">seqLet</code>","position":{"start":{"line":29,"column":40,"offset":2276},"end":{"line":29,"column":48,"offset":2284},"indent":[]}},{"type":"text","value":" 내부에 for문을 선언하되 인덱스 변수를 ","position":{"start":{"line":29,"column":48,"offset":2284},"end":{"line":29,"column":72,"offset":2308},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":29,"column":72,"offset":2308},"end":{"line":29,"column":77,"offset":2313},"indent":[]}},{"type":"text","value":"으로 선언한 것이고, 두번째 스크립트는 함수 ","position":{"start":{"line":29,"column":77,"offset":2313},"end":{"line":29,"column":102,"offset":2338},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">seqVar</code>","position":{"start":{"line":29,"column":102,"offset":2338},"end":{"line":29,"column":110,"offset":2346},"indent":[]}},{"type":"text","value":" 내부에 마찬가지로 for문을 선언하되 인덱스 변수를 ","position":{"start":{"line":29,"column":110,"offset":2346},"end":{"line":29,"column":140,"offset":2376},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":29,"column":140,"offset":2376},"end":{"line":29,"column":145,"offset":2381},"indent":[]}},{"type":"text","value":"로 선언한 것이다. 이것을 제외한 나머지 내용은 두 함수가 모두 동일하다.","position":{"start":{"line":29,"column":145,"offset":2381},"end":{"line":29,"column":186,"offset":2422},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":2237},"end":{"line":29,"column":186,"offset":2422},"indent":[]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">seqLet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"final i: \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// seqLet()</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// Uncaught ReferenceError: i is not defined at seqLet ...</span></code></pre></div>","position":{"start":{"line":31,"column":1,"offset":2424},"end":{"line":46,"column":4,"offset":2639},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">seqVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"final i: \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// seqLet()</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// final i : 5</span></code></pre></div>","position":{"start":{"line":48,"column":1,"offset":2641},"end":{"line":63,"column":4,"offset":2812},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"js","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">seqVar2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"final i: \"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// seqLet()</span>\n<span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// final i : 5</span></code></pre></div>","position":{"start":{"line":65,"column":1,"offset":2814},"end":{"line":82,"column":4,"offset":3006},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"여기서 다음의 사실을 알 수 있다.","position":{"start":{"line":84,"column":1,"offset":3008},"end":{"line":84,"column":20,"offset":3027},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":3008},"end":{"line":84,"column":20,"offset":3027},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"첫째, 함수 안에서도 중괄호(curly brackets)로 명령 블록을 만들 수 있다.","position":{"start":{"line":86,"column":3,"offset":3031},"end":{"line":86,"column":51,"offset":3079},"indent":[]}}],"position":{"start":{"line":86,"column":3,"offset":3031},"end":{"line":86,"column":51,"offset":3079},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":3029},"end":{"line":86,"column":51,"offset":3079},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"둘째, ","position":{"start":{"line":87,"column":3,"offset":3082},"end":{"line":87,"column":7,"offset":3086},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":87,"column":7,"offset":3086},"end":{"line":87,"column":12,"offset":3091},"indent":[]}},{"type":"text","value":"으로 선언된 변수는 반드시 그것이 선언된 ","position":{"start":{"line":87,"column":12,"offset":3091},"end":{"line":87,"column":35,"offset":3114},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"블록 안에서만 유효","position":{"start":{"line":87,"column":37,"offset":3116},"end":{"line":87,"column":47,"offset":3126},"indent":[]}}],"position":{"start":{"line":87,"column":35,"offset":3114},"end":{"line":87,"column":49,"offset":3128},"indent":[]}},{"type":"text","value":"하다.","position":{"start":{"line":87,"column":49,"offset":3128},"end":{"line":87,"column":52,"offset":3131},"indent":[]}}],"position":{"start":{"line":87,"column":3,"offset":3082},"end":{"line":87,"column":52,"offset":3131},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":3080},"end":{"line":87,"column":52,"offset":3131},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"셋째, ","position":{"start":{"line":88,"column":3,"offset":3134},"end":{"line":88,"column":7,"offset":3138},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":88,"column":7,"offset":3138},"end":{"line":88,"column":12,"offset":3143},"indent":[]}},{"type":"text","value":"로 선언된 변수는 그것이 선언된 ","position":{"start":{"line":88,"column":12,"offset":3143},"end":{"line":88,"column":30,"offset":3161},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"지역(즉, 함수) 안에서 얼마든지 유효","position":{"start":{"line":88,"column":32,"offset":3163},"end":{"line":88,"column":53,"offset":3184},"indent":[]}}],"position":{"start":{"line":88,"column":30,"offset":3161},"end":{"line":88,"column":55,"offset":3186},"indent":[]}},{"type":"text","value":"하다.","position":{"start":{"line":88,"column":55,"offset":3186},"end":{"line":88,"column":58,"offset":3189},"indent":[]}}],"position":{"start":{"line":88,"column":3,"offset":3134},"end":{"line":88,"column":58,"offset":3189},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":3132},"end":{"line":88,"column":58,"offset":3189},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":3029},"end":{"line":88,"column":58,"offset":3189},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"한편, 이러한 엄격한 ","position":{"start":{"line":90,"column":1,"offset":3191},"end":{"line":90,"column":13,"offset":3203},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":90,"column":13,"offset":3203},"end":{"line":90,"column":18,"offset":3208},"indent":[]}},{"type":"text","value":" 선언은 필요에 의해 그 값을 얼마든지 다시 정의(대입)할 수 있다. 하지만 이러한 값 재정의조차 불가능하게 만드는 변수선언도 있다. 그것은 바로 ","position":{"start":{"line":90,"column":18,"offset":3208},"end":{"line":90,"column":100,"offset":3290},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":90,"column":100,"offset":3290},"end":{"line":90,"column":107,"offset":3297},"indent":[]}},{"type":"text","value":" 선언이다. 축약된 선언명 그대로, ","position":{"start":{"line":90,"column":107,"offset":3297},"end":{"line":90,"column":127,"offset":3317},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":90,"column":127,"offset":3317},"end":{"line":90,"column":134,"offset":3324},"indent":[]}},{"type":"text","value":"는 선언한 값을 절대불변의 '상수'(constant)로 만들어버린다. 반면, 위에서 살펴본 ","position":{"start":{"line":90,"column":134,"offset":3324},"end":{"line":90,"column":185,"offset":3375},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":90,"column":185,"offset":3375},"end":{"line":90,"column":190,"offset":3380},"indent":[]}},{"type":"text","value":" 선언은 축약된 선언명 그대로, 대입 선언한 값을 언제든지 바꿀 수 있는 '가변 변수'(variable)로 만든다. 일반적으로 ","position":{"start":{"line":90,"column":190,"offset":3380},"end":{"line":90,"column":261,"offset":3451},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":90,"column":261,"offset":3451},"end":{"line":90,"column":266,"offset":3456},"indent":[]}},{"type":"text","value":"보다 ","position":{"start":{"line":90,"column":266,"offset":3456},"end":{"line":90,"column":269,"offset":3459},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":90,"column":269,"offset":3459},"end":{"line":90,"column":274,"offset":3464},"indent":[]}},{"type":"text","value":"을 이용한 변수 선언이 권장되는 이유는 바로 여기에 있다. 블록 단위의 명령 실행에 있어 변수의 중복과 간섭을 최소화하려는 것이다.\n","position":{"start":{"line":90,"column":274,"offset":3464},"end":{"line":91,"column":1,"offset":3538},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":91,"column":1,"offset":3538},"end":{"line":91,"column":5,"offset":3542},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":91,"column":5,"offset":3542},"end":{"line":92,"column":1,"offset":3543},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":92,"column":1,"offset":3543},"end":{"line":92,"column":5,"offset":3547},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":92,"column":5,"offset":3547},"end":{"line":93,"column":1,"offset":3548},"indent":[1]}},{"type":"html","value":"<br>","position":{"start":{"line":93,"column":1,"offset":3548},"end":{"line":93,"column":5,"offset":3552},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":3191},"end":{"line":93,"column":5,"offset":3552},"indent":[1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":94,"column":1,"offset":3553}}}}