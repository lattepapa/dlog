{"pageContext":{"html":"<h1>Object Oriented Programming</h1>\n<h3>객체지향 프로그래밍</h3>\n<ul>\n<li>의미 : 사람이 세계를 보고 이해한 것을 컴퓨터 프로그래밍으로 흉내낸 것</li>\n<li>컴퓨터 프로그래밍 언어에 대한 짧은 고찰</li>\n<li><em>Machinery Language</em> : 0과 1로만 조합</li>\n<li><em>Assembly Language</em> : 만들어진 변수(r1 ~ r10), 정해진 규칙(swperm, xor, sieve 등)으로만 조합</li>\n<li><em>High-level Language</em> : 인간의 의사표현과 거의 유사</li>\n<li><em>Procedural Language</em>(절차지향언어) : C, COBOL, Fortran, LISP, Perl, HTML, VBScript 등 →</li>\n<li><em>Object Oriented Language</em>(객체지향언어)\n— class 지향언어 : JAVA, C++, C#, Python, (Perl,) PHP 등\n— prototype 지향언어 : javascript 등</li>\n</ul>\n<h3>Class</h3>\n<ul>\n<li>의미 : 같은 종류의 '것'들이 가져야 할 속성, 기능 등을 정의하는 일종의 범주를 의미</li>\n<li><em>Object</em>(객체) : <em>Class</em>의 <em>instance</em>이자, '객체다움'의 속성과 기능을 처음으로 가진 조상님_</li>\n<li>실제 : 속성(<em>property</em>; <em>attribute</em>)을 정하는 <code class=\"language-text\">constructor</code>와, 기능들을 정하는 <code class=\"language-text\">method</code>로 구성\n→ 특히, <em>constructor</em>는 실행컨텍스트 <code class=\"language-text\">this</code>를 통해 보다 더 구체화된다!!!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Linked List와 Node, 그리고 이것들에 대한 methods를 정의하는 class 예시</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addToTail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ... 다른 methods 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>객체지향 프로그래밍의 4가지 특성</h3>\n<ul>\n<li><strong>Encapsulation</strong> : 속성(=<em>data</em>)은 <em>constructor</em>, 기능(=<em>function</em>)은 <em>methods</em>로 묶여 정리되는 것\n→ 재사용성을 높여주고(=시간복잡도 경감), 정보를 <em>class</em> 안에 은닉 가능</li>\n<li><strong>Inheritance</strong> : <em>instance</em>가 <em>class</em>의 모든 속성을 상속받는 것으로 하되, 그 <em>key value</em>를 달리할 수 있는 것\n→ 캡슐화와 마찬가지로 재사용성을 높여주는 중요한 특성!!</li>\n<li><strong>Abstraction</strong> : 내부구조야 어떻든, 사용자 입장에서 편리하도록 <em>methods</em>들이 설계되는 것\n→ 이러한 추상화 특성도 마찬가지로 시간복잡도 경감시켜줌</li>\n<li><strong>Polymorphism</strong> : <em>instance</em>는 당연히 <em>prototype</em>의 <em>methods</em>를 쓸 수 있되, 결과의 다양성을 인정하는 것\n(ex1) 모든 <em>tag</em>들의 부모인 <code class=\"language-text\">HTMLElement</code>는 DOM에서의 <em>instance</em>이므로, <code class=\"language-text\">TextBox, Select, CheckBox</code>와 같은 tag들은 <code class=\"language-text\">HTMLElement</code>가 쓸 수 있는 <code class=\"language-text\">.render()</code> <em>method</em>를 똑같이 쓸 수 있다. 만약 이러한 객체지향 프로그래밍의 Polymorphism이 허용되지 않는다면, 저 tag들은 해당 <em>method</em>를 쓰기 위해 비효율적으로 <code class=\"language-text\">switch case...</code>구문을 정의해야 할 것이다.\n(ex2) 각기 다른 두 class(Human, Student)를 통해 만든 인스턴스들에게, 각각의 <em>prototype</em>으로부터 받은 <code class=\"language-text\">.sleep()</code>이라는 임의의 메소드 실행 결과를 다르게 해주는 것</li>\n</ul>\n<h3>Instantiation Patterns</h3>\n<ul>\n<li><strong>Functional Instantiation</strong> : 모든 <em>instance</em>에 <em>class</em>의 <em>methods</em>가 자동으로 할당되므로 메모리효율은 낮음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">carClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> carInstance <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  carInstance<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 속성</span>\n  carInstance<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 메소드</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> carInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> car1 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> car2 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>Functional Shared Instantiation</strong> : 사용이 필요한 <em>method</em>만 <em>instance</em>가 가져가므로 메모리효율이 좋음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">pickMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">toInstance<span class=\"token punctuation\">,</span> methods</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toInstance<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> methods<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> carMethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncarMethods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">carClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> carInstance <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    position<span class=\"token operator\">:</span> num<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">pickMethod</span><span class=\"token punctuation\">(</span>carInstance<span class=\"token punctuation\">,</span> carMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> carInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> car1 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> car2 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>Prototypal Instantiation</strong> : 실행컨텍스트 <code class=\"language-text\">this</code>와 <code class=\"language-text\">Object.create()</code> <em>method</em> 활용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> carMethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncarMethods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>positoin<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">carClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> carInstance <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>carMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  carInstance<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> carInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> car1 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> car2 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><strong>Pseudoclassical Instantiation</strong> : 가장 일반적인 <em>instance</em> 생성 방법이(었)다!!!! <code class=\"language-text\">new</code> 키워드를 활용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">carClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ncarClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> car1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> car2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>상속</h1>\n<h3>Prototype과 Prototype Chain</h3>\n<ul>\n<li><strong>Prototype</strong> : 말 그대로 blue print, <strong>원형 객체</strong>를 의미한다. 자바스크립트는 프로토타입 언어이다!!</li>\n<li><strong>constructor</strong> : <em>instance</em>가 초기화될 때(=<em>class</em>로부터 만들때) 실행하는 생성자 함수를 의미</li>\n<li><strong>this</strong> : 함수가 실행될 때 해당 <em>scope</em>마다 생성되는 고유한 실행컨텍스트\n→ <code class=\"language-text\">new</code> 키워드로 <em>instance</em>를 생성 했을 때는 해당 <em>instance</em>가 바로 <code class=\"language-text\">this</code> 값이 된다!!!</li>\n<li><strong>Prototype Object(원본속성 그자체)</strong></li>\n<li>객체는 언제나 함수에 의해 생성된다.\n→ 엄밀히는, <code class=\"language-text\">Object</code>는 자바스크립트가 제공하는 고유함수이다.</li>\n<li>모든 함수는 <code class=\"language-text\">constructor</code> 자격을 갖는다. 그렇기 때문에 함수는 <code class=\"language-text\">new</code> 키워드의 활용대상이 된다.</li>\n<li><code class=\"language-text\">Human</code>이라는 <em>class</em>를 만들어보자. 그러면...\n→ <code class=\"language-text\">Human.prototype</code>이라고 하는 '자동 생성'된 속성에서 <code class=\"language-text\">constructor</code> 정보와 <code class=\"language-text\">__proto__</code>(<em>Prototype Link</em>) 정보를 확인할 수 있게된다.\n→ 이것이 바로 <em>Prototype Object</em> 인 것이다!!!</li>\n<li>여기서 <code class=\"language-text\">Human.prototype.eyes</code>라는 <em>method</em>를 만들자. 이 <em>method</em>는 항상 <code class=\"language-text\">2</code>를 리턴한다.\n→ 그러면 이 <code class=\"language-text\">eyes: 2</code>라는 <em>key-value</em> 속성이 <em>Prototype Object</em>의 속성 중 하나로 삽입된다.</li>\n<li><strong>Prototype Link(물려받은 원본속성)</strong></li>\n<li>계속 이어서 생각해보자. 저 <code class=\"language-text\">Human</code> <em>class</em>로부터 <code class=\"language-text\">smith</code>라는 <em>instance</em>를 만든다.</li>\n<li>당연히 <code class=\"language-text\">smith</code>는 <em>prototype</em>이 아니기 때문에 <em>Prototype Object</em> 정보가 존재하지 않는다.\n그런데 <code class=\"language-text\">smith.eyes</code>로 <em>method</em>를 실행할 수도 있고, 결과값 <code class=\"language-text\">2</code>도 확인할 수 있다.</li>\n<li>왜냐하면 이 <code class=\"language-text\">smith</code> <em>instance</em>의 <code class=\"language-text\">__proto__</code>(<em>Prototype Link</em>)에 자신의 <em>Prototype Object</em>가 명시(<em>link</em>)되어 있기 때문이다!!</li>\n<li>이와 같이, 모든 객체는 반드시 <code class=\"language-text\">__proto__</code>(<em>Prototype Link</em>)를 가지며, 이는 자신의 <em>prototype</em> 정보, 즉, <strong>상속(유전)된 속성들을 항상 내장</strong>하기 위함이다. 이를 <strong>Prototype Chain</strong>(또는 <strong>[[Prototype]]</strong>)이라고 부른다!!</li>\n</ul>\n<h3>간단한 Prototype 탐구</h3>\n<ul>\n<li><em>HTML</em> 환경에서</li>\n<li><code class=\"language-text\">EventTarget</code>은 모든 HTML element들의 시조 <em>class</em>인 객체이다.\n→ 따라서 <code class=\"language-text\">.toString()</code> <em>method</em>를 쓸 수 있다.</li>\n<li><code class=\"language-text\">Node</code>는 <code class=\"language-text\">EventTarget</code>를 통해 만들어진 <em>instance</em>이다.\n→ 따라서 <code class=\"language-text\">.toString()</code> <em>method</em>를 쓸 수 있다.\n→ 새롭게 <code class=\"language-text\">.append()</code> <em>method</em>를 만들었다.</li>\n<li><code class=\"language-text\">Element</code>는 <code class=\"language-text\">Node</code>를 통해 만들어진 <em>instance</em>이다.\n→ 따라서 <code class=\"language-text\">.toString()</code>, <code class=\"language-text\">.append()</code> <em>method</em>를 쓸 수 있다.</li>\n<li><code class=\"language-text\">HTMLElement</code>는 <code class=\"language-text\">Element</code>를 통해 만들어진 <em>instance</em>이다.\n→ 따라서 <code class=\"language-text\">.toString()</code>, <code class=\"language-text\">.append()</code> <em>method</em>를 쓸 수 있다.</li>\n<li><code class=\"language-text\">div</code>는 <code class=\"language-text\">HTMLElement</code>를 통해 만들어진 <em>instance</em>이다. 따라서 ....</li>\n<li><strong>Pseudoclassical Legacy pattern</strong>과 <strong>ES6 pattern</strong> 사이에서</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Human class와 method, instance 생성</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Human</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Human</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sleep</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> steve <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"steve\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Student class와 method, instance 생성</span>\n<span class=\"token comment\">// 단, class의 prototype과 method를 Human의 것 그대로를 복사해서 가져온다.</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Student</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Human</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// prototype 및 method 복사</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Human</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// constructor 연결</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">learn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"열공!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 복사된 sleep method를 그대로 쓰지 않고 리턴값 변형!!</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sleep</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Human</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"학생이 잠이나 자나?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 확인</span>\n<span class=\"token keyword\">let</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"학생이 잠이나 자나?\"</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">learn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"열공!\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Human class와 method, instance 생성</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Student class와 method, instance 생성</span>\n<span class=\"token comment\">// 단, class의 prototype과 method를 Human의 것 그대로를 복사해서 가져온다.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// extends 키워드를 쓴다면 반드시 super 키워드도 함께 나와야 한다!!!</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 특별히 새로 정의하고 싶은 경우, super 키워드 다음 문장에 정의내용 기술!!</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"학생이 잠이나 자나?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">learn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"열공!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 확인</span>\n<span class=\"token keyword\">let</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"zzz\"</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">learn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"열공!\"</span></code></pre></div>","title":"Object Oriented Programming"}}