{"pageContext":{"html":"<h3>map 메소드</h3>\n<blockquote>\n<p>\"<em>The <strong>Map</strong> object holds key-value pairs and <strong>remembers the original</strong> insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value.</em>\" - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\"><strong>MDN</strong></a></p>\n</blockquote>\n<p><strong>map 메소드</strong>는 이전 포스팅인 forEach 메소드와 동일한 논리구조를 갖는다. 즉, 원본배열의 요소들에 대해 <strong>주어진 함수</strong>를 적용시키는 구조이다. 여기서 중요한 것은 <strong>map 메소드</strong>는 <strong>immutable</strong>(원본불변)의 성질을 갖는다는 것이다. <strong>map 메소드</strong>에 의해서는 원본배열은 수정되지 않으며, 마치 <strong>slice 메소드</strong>와 같이 새로운 배열이 도출된다. 예를 들어 아래와 같은 for 반복문이 먼저 있다고 하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"mini cooper\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"Mercedes\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"CLA 250\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"volkswagen\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"Golf TDI\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>brand<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>model<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<table>\n  <tr><td>Name: BMW mini cooper</td></tr>\n  <tr><td>Name: Mercedes CLA 250</td></tr>\n  <tr><td>Name: volkswagen Golf TDI</td></tr>\n</table>\n<br>\n<br>\n<br>\n<p>이것을 <strong>map 메소드</strong>를 활용하여 아래와 같이 바꿔서 표현할 수 있다. forEach 메소드에서의 경우와 마찬가지로, 위에서 <code class=\"language-text\">arr[i]</code>라고 썼던 arr의 요소들은 함수 <code class=\"language-text\">printCarName</code>에서 <code class=\"language-text\">car</code>라고 하는 임의의 <strong>입력변수</strong>로 대신 표현할 수 있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"mini cooper\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"Mercedes\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"CLA 250\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"volkswagen\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"Golf TDI\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printCarName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">car</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>car<span class=\"token punctuation\">.</span>brand<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>car<span class=\"token punctuation\">.</span>model<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>printCarName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table>\n  <tr><td>Name: BMW mini cooper</td></tr>\n  <tr><td>Name: Mercedes CLA 250</td></tr>\n  <tr><td>Name: volkswagen Golf TDI</td></tr>\n</table>\n<br>\n<p>이처럼 <strong>map 메소드</strong>는 forEach 메소드와 동일한 결과물을 만들 수 있다. 한편, 위의 스크립트는 forEach처럼 반복나열 기능을 수행하도록 한 것이었는데 아래와 같이 <strong>함수</strong> 내용들을 바꾸면 다양한 변주가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"mini cooper\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"Mercedes\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"CLA 250\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"volkswagen\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"Golf TDI\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">car</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>brand <span class=\"token operator\">=</span> <span class=\"token string\">\"Made in Germany, \"</span> <span class=\"token operator\">+</span> car<span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n또는 다음과 같이 표현할 수도 있다.\nfunction nation(car) {\n  return car.brand = 'Made in Germany, ' + car.brand;\n};\n\narr.map(nation);\n*/</span></code></pre></div>\n<table>\n  <tr><td>[ \"Made in Germany, BMW\", \"Made in Germany, Mercedes\", \"Made in Germany, volkswagen\" ]</td></tr>\n</table>\n<br>\n<p>즉, <strong>map 메소드</strong>는 원본배열을 수정하지 않고 <strong>주어진 함수</strong>의 내용에 따라서, <strong>원본배열의 길이</strong>(원본배열의 요소개수)만큼 <strong>새로운 배열을 리턴</strong>한다.\n<br>\n<br>\n<br></p>\n<h3>filter 메소드</h3>\n<blockquote>\n<p>\"<em>The <strong>filter</strong>() method creates a new array with all elements that <strong>pass the test</strong> implemented by the provided function.</em>\" - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\"><strong>MDN</strong></a></p>\n</blockquote>\n<p><strong>filter 메소드</strong>도 map 메소드와 forEach 메소드처럼 원본배열의 요소들에 대해 <strong>주어진 함수</strong>를 적용하는 구조이다. 또한 <strong>filter 메소드</strong>도 마찬가지로 <strong>immutable</strong>(원본불변) 하다. 아래의 예를 통해 확인하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"mini cooper\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"Mercedes\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"CLA 250\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> brand<span class=\"token operator\">:</span> <span class=\"token string\">\"volkswagen\"</span><span class=\"token punctuation\">,</span> model<span class=\"token operator\">:</span> <span class=\"token string\">\"Golf TDI\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">luxury</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">car</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> car<span class=\"token punctuation\">.</span>brand<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"M\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>luxury<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n마찬가지로 다음과 같이 표현할 수 있다.\narr.filter(function(car) {\n  return car.brand.indexOf('M') !== -1;\n});\n*/</span></code></pre></div>\n<table>\n  <tr><td>[ </td></tr>\n  <tr><td align= \"center\">{ brand: 'BMW', model: 'mini cooper' },</td></tr>\n  <tr><td align= \"center\">{ brand: 'Mercedes', model: 'CLA 250' }</td></tr>\n  <tr><td> ]</td></tr>\n</table>\n<br>\n<p>즉, <strong>filter 메소드</strong>는 원본배열을 수정하진 않지만 map 메소드와 달리 <strong>주어진 함수</strong>의 <strong>내용(=조건)에 들어맞는 요소</strong>들만 추려내어 <strong>새로운 배열을 리턴</strong>한다.\n<br>\n<br>\n<br></p>\n<h4>1. 아래 힌트와 같이 Netfix 시청 현황정보가 주어졌다. 주어진 정보를 토대로 30대 남성이 가장 좋아하는 장르를 알고자 한다.</h4>\n<p><span style=\"color:#088A68\"><strong>힌트</strong> </span></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let list = [\n  { n:&#39;Thor&#39;, a:34, t:&#39;Die Hard 3&#39;, g:&#39;action&#39;, d:&#39;18 Jul&#39; },\n  { n:&#39;Tony&#39;, a:38, t:&#39;Ghost Busters&#39;, g:&#39;comic&#39;, d:&#39;3 Jul&#39; },\n  { n:&#39;Wanda&#39;, a:18, t:&#39;Conjuring&#39;, g:&#39;horor&#39;, d:&#39;20 Jul&#39; },\n  { n:&#39;Steve&#39;, a:39, t:&#39;First Avenger&#39;, g:&#39;action&#39;, d:&#39;1 Jul&#39; },\n  { n:&#39;Parker&#39;, a:18, t:&#39;AI&#39;, g:&#39;sf&#39;, d:&#39;18 Jul&#39; },\n  { n:&#39;Wakanda&#39;, a:36, t:&#39;Conjuring2&#39;, g:&#39;horor&#39;, d:&#39;20 Jul&#39; },\n  { n:&#39;Strange&#39;, a:43, t:&#39;ET&#39;, g:&#39;sf&#39;, d:&#39;3 Jul&#39; }\n]</code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// [더이상 쪼갤 수 없는 것] 30대</span>\n<span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">man</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [로직1] 30대 시청현황 배열에서 장르요소(g)만 산출</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\ntemp<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">genre</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>genre<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [로직2] arr 배열 내 요소들이 각각 얼마나 반복되는 지 확인</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> mostGenre<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> mostCnt<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// obj에 정의되지 않았다면 key와 value를 만들어주고</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    obj<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// key가 존재한다면 value에 1을 더해주는데,</span>\n  obj<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 만약 obj의 mostCnt key의 value보다 크다면 각각 모스트 key로 대입됨!</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"mostCnt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"mostCnt\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"mostGenre\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 최종값 확인</span>\n<span class=\"token comment\">// obj.['mostGenre'];</span>\nobj<span class=\"token punctuation\">;</span></code></pre></div>\n<span style=\"color:#088A68\">\n<table style=\"border-color:#088A68\">\n  <tr><td>{ mostGenre: \"action\", mostCnt: 3, action: 3, comic: 2, horor: 2 }</td></tr>\n  </table>\n</span>","title":"map과 filter"}}