{"pageContext":{"html":"<h3>while 반복문</h3>\n<blockquote>\n<p>\"The <strong>while</strong> statement creates a loop that executes a specified statement <strong>as long as the test condition evaluates to true.</strong>\" - <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\">MDN</a></p>\n</blockquote>\n<p><strong>반복문</strong>(loop)은 반복의 조건(condition)이 true일 때까지만 특정명령(statement)을 반복적으로 실행한다. 반복문은 <strong>for</strong>, <strong>while</strong>라는 문법적 키워드를 사용하거나 <strong>forEach</strong>라고 하는 <strong>함수형 구문</strong>을 통해 구동한다. 특히, <strong>while</strong> 반복문은 2가지 이상의 변수를 고려해야 할 때 매우 심플하게 활용된다. 그리고 개인적으로 생각하기에, 반복의 조건이 <strong>sementic</strong>할 경우, for 반복문보다 while 반복문이 더 직관적인 것 같기도 하다.\n<br>\n<br>\n<br></p>\n<h4>1. 은행에서 연 고정금리로 운용하는 적금상품이 있다. 이 상품은 원금을 최초에 한 번 불입하면 추가로 적금을 넣을 수 없는 특이한 점이 있다. 이 적금상품에서 최초에 불입한 원금이 2배가 될 때까지 걸리는 시간(연)을 구하고자 한다.</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doubledTime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// [더이상 쪼갤 수 없는 것] 원금을 불입한 당해년도는 원리금 계산 불가</span>\n  <span class=\"token keyword\">let</span> account <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> duration <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// [1] 원리금이 그 초기값인 1의 2배가 되기 직전까지 원리금 계산을 반복하는데</span>\n  <span class=\"token comment\">// [2] 원리금 계산을 마치면 다음 loop에 들어가기 전에 기간에 +1</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>account <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    account <span class=\"token operator\">=</span> account <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> rate <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    duration<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 최종값 리턴</span>\n  <span class=\"token keyword\">return</span> duration<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","title":"while loop"}}