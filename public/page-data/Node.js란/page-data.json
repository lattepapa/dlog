{"componentChunkName":"component---src-templates-post-template-tsx","path":"/Node.js란","result":{"pageContext":{"html":"<h3>Node.js의 태동</h3>\n<p>서버를 만드는 개발도구로, 2009년 Ryan Dahl이 <strong>비동기 입출력(Asynchronouse &#x26; Non-Blocking I/O)</strong>의 니즈를 토대로 만들었다고 한다. 이전까지는 클라이언트(웹 환경이라면 '브라우저', 시스템 환경이라면 '프로그램')에서 데이터를 서버(웹 환경이라면 '웹 서버', 시스템 환경이라면 'OS의 파일시스템')에 어떤 요청을 보내면, 서버에서 그것을 읽고 요청에 맞는 처리(즉, '이벤트 핸들러') 후 클라이언트에게 다시 내보내기까지 클라이언트는 다른 요청을 할 수 없었다. 이를 동기 입출력이라고 한다. 동기 입출력 환경에서는 클라이언트의 대기시간이 축적됨에 따라 프로세서, 메모리 등에 필연적으로 과부하가 걸리게 된다. 이러한 문제를 해결하는 것이 바로 비동기 입출력이다. 그럼 어떻게 비동기 입출력을 구현할 수 있을까?</p>\n<h3>Callback(콜백함수)</h3>\n<p><strong>콜백함수</strong>가 바로 비동기 입출력을 구현하는 핵심 개념이라고 할 수 있다. 비동기 입출력 환경에서는 클라이언트가 서버로부터 바로 응답 받는 것이 아니라, 콜백함수에 서버의 처리 내용이 들어왔을 때에만 이 콜백함수가 클라이언트에 자동호출된다. 따라서 클라이언트는 굳이 서버의 응답을 언제까지고 기다릴 필요가 없어지게 되는 것이다. 비유를 하자면, 클라이언트에 콜백함수 따로 없는 동기 입출력 환경은 마치 등기우편(동기적 처리결과)을 기다리는 집주인(클라이언트)의 모양새이다. 반면, 클라이언트에 콜백함수가 있는 비동기 입출력 환경은 일반우편(비동기적 처리결과)이 우편함(콜백함수)에 넣어지기만 하면 되는 상황과 유사하다. 이를 코드로도 간단히 살펴볼 수 있다.</p>\n<h4>동기 입출력의 경우</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// file.read 메소드를 통해 abc.txt 파일내용 출력준비가 완료될때까지 대기..</span>\n<span class=\"token comment\">// 출력.... 지이익... 지이익....</span>\n\n<span class=\"token function\">requestTask</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<h4>비동기 입출력의 경우</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\">file<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">printData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">requestTask</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 일단 requestTask 함수가 실행되고,</span>\n<span class=\"token comment\">// abc.txt 파일내용 출력준비가 되면 자동으로 콜백함수인 printData 실행</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Event Binding(이벤트 바인딩)</h3>\n<p>자바스크립트는 인터프리터(interpreter) 방식, 즉, 코드를 한 줄씩 해석해나가는 언어이다. 이는 싱글 쓰레드에 의해 코드가 연산되는 작동방식에 기인하는데, 아무리 비동기 입출력을 효과적으로 구성하더라도 성능상의 한계를 드러낼 것이 분명했다. 하지만 이는 곧 Google Chrome의 <strong>V8 자바스크립트 엔진</strong>을 통해 극복되었다. V8 엔진은 <strong>node 표준 라이브러리</strong>와 <strong>http, socket 등의 네트워크 바인딩</strong>을 통해 자바스크립트 코드를 네이티브 코드로 변환해준다. 또한 V8 엔진은 <strong>이벤트 루프</strong>와 <strong>쓰레드 풀</strong>를 토대로 클라이언트의 요청을 잘 받아낼 수 있도록 설계되어있다. 클라이언트의 요청이 서버와 어떻게 커뮤니케이션 되는 지 아래의 코드로 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\">http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> method<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> <span class=\"token string\">\"/messages\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// [1] { event: \"data\" }의 경우 'chunck'에 데이터를 붙이는 콜백함수 자동호출</span>\n  <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  response\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunck</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    body <span class=\"token operator\">=</span> body <span class=\"token operator\">+</span> chunck<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token comment\">// [2] { event: \"end\" }의 경우, 최종 데이터를 JSON으로 다듬는 콜백함수 자동호출</span>\n  <span class=\"token comment\">//    --> 서버에 JSON 파싱된 데이터를 저장한 후, 그 결과물을 다시 제공받음</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n    serverData<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<p>여기서 <strong>.on() 메소드</strong>를 주목하자. 서버가 클라이언트로부터 데이터를 입력(POST)받는다면 <strong>\"data\" 이벤트</strong>가 발생한 것으로 간주된다. 이때 자동호출이 약속된 <strong>콜백함수</strong>는 서버에 입력된 데이터를 chunck로 만들어서 <strong>비동기적으로 응답객체인 response에 실어담아 보낸다.</strong> 이는 단순한 클라이언트의 '요청' 수준이 아니라 <strong>어떤 이벤트를 비동기 처리(= 콜백함수)와 연계시킨 것</strong>이라고 할 수 있는데, 이러한 연계를 바로 <strong>바인딩(bindng)</strong>이라고 한다. 이벤트 바인딩은 앞서 살펴 본 코드처럼 <code class=\"language-text\">{객체}.on(&quot;이벤트명&quot;, (인자) =&gt; {익명콜백함수})</code>의 형식으로 지정하면 된다.</p>\n<h3>Modularization(모듈화)</h3>\n<p>Node.js는 필요한 기능 및 코드들을 별도의 자바스크립트 파일로 모듈화하여 관리하는 것을 지원한다. 단, CommonJs 표준스펙을 따라야하는 제약조건이 있다. 모듈로 분리된 자바스크립트 파일을 사용하고자 할 때에는 <strong>require() 함수</strong>로 호출하면 된다. 이 함수는 해당 자바스크립트 파일을 자바스크립트 객체로 인식시키는 역할을 수행한다. 만약 여러 개의 모듈을 합쳐서 하나의 패키지로 만든다면, 다른 Node.js 개발자들도 사용할 있도록 npm에 의한 설치 공유도 가능하다.</p>\n<br>\n<br>\n<br>\n<p><text style=\"color:gray\"><em>*참고: \"Node.js 프로그래밍\"(정재곤님, 이지스퍼블리싱)</em></text></p>","title":"Node.js란","category":"nodejs","date":"11 Oct, 2020"}},"staticQueryHashes":["3649515864"]}