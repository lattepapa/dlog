{"componentChunkName":"component---src-templates-post-template-tsx","path":"/Object Oriented Programming","result":{"pageContext":{"html":"<h3>객체지향 프로그래밍</h3>\n<p>사람이 세계를 보고 이해한 것을 컴퓨터 프로그래밍으로 흉내낸 것을 의미한다.<br>\n1) <em>Machinery Language</em> : 0과 1로만 조합<br>\n2) <em>Assembly Language</em> : 만들어진 변수(r1 ~ r10), 정해진 규칙(swperm, xor, sieve 등)으로만 조합<br>\n3) <em>High-level Language</em> : 인간의 의사표현과 거의 유사</p>\n<ul>\n<li>* <em>Procedural Language</em>(절차지향언어) : C, COBOL, Fortran, LISP, Perl, HTML, VBScript 등</li>\n<li>* <em>Object Oriented Language</em>(객체지향언어)</li>\n<li>\n<ul>\n<li>- class 지향언어 : JAVA, C++, C#, Python, (Perl,) PHP 등</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>- prototype 지향언어 : javascript 등</li>\n</ul>\n</li>\n</ul>\n<h3>Class</h3>\n<p>같은 종류의 '것'들이 가져야 할 속성, 기능 등을 정의하는 일종의 범주를 의미</p>\n<h4>Object(객체)</h4>\n<p>클래스의 인스턴스이자, '객체다움'의 속성과 기능을 처음으로 가진 조상님을 의미하며, 속성(= property 또는 attribute)을 정하는 <strong>constructor</strong>와, 기능들을 정하는 메소드로 구성된다. 특히, <strong>constructor</strong>는 실행컨텍스트 <strong>this</strong>를 통해 보다 더 구체화된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token comment\">// Linked List와 Node, 그리고 이것들에 대한 methods를 정의하는 class 예시</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">addToTail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ... 다른 methods 생략</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<h3>객체지향 프로그래밍의 4가지 특성</h3>\n<h4>Encapsulation</h4>\n<p>속성(= data)은 constructor, 기능(= function)은 메소드로 묶여 정리되는 것을 의미하며, 이러한 특성은 프로그램의 재사용성을 높여주고(= 시간복잡도 경감), 정보를 클래스 안에 은닉을 가능케 한다.</p>\n<h4>Inheritance</h4>\n<p>인스턴스가 클래스의 모든 속성을 상속받는 것으로 하되, 그 key value를 달리할 수 있는 것을 의미하며, 캡슐화와 마찬가지로 재사용성을 높여주는 중요한 특성이다.</p>\n<h4>Abstraction</h4>\n<p>내부구조야 어떻든, 사용자 입장에서 편리하도록 메소드들이 설계되는 것을 의미하며, 이러한 추상화 특성도 마찬가지로 시간복잡도 경감시켜준다.</p>\n<h4>Polymorphism</h4>\n<p>인스턴스는 당연히 프로토타입의 메소드를 쓸 수 있되, 결과의 다양성을 인정하는 것을 의미한다. 이러한 다형성의 대표적인 예시로는 모든 태그들의 부모인 <strong>HTMLElement</strong>는 DOM에서의 인스턴스이므로, <strong>TextBox, Select, CheckBox</strong>와 같은 태그들은 <strong>HTMLElement</strong>가 쓸 수 있는 <strong>.render() 메소드</strong>를 똑같이 쓸 수 있는 것이 있다. 만약 이러한 객체지향 프로그래밍의 Polymorphism이 허용되지 않는다면, 저 태그들은 해당 메소드를 쓰기 위해 비효율적으로 <strong>switch case...</strong>구문을 정의해야 할 것이다. 다형성의 또다른 예는 각기 다른 두 클래스(Human, Student)를 통해 만든 인스턴스들에게, 각각의 프로토타입으로부터 받은 <strong>.sleep()</strong>이라는 임의의 메소드 실행 결과를 다르게 해주는 것 등이 있다.</p>\n<h3>Instantiation Patterns</h3>\n<h4>Functional Instantiation</h4>\n<p>모든 인스턴스에 클래스의 메소드가 자동으로 할당되므로 메모리효율은 낮음</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">carClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> carInstance <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  carInstance<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 속성</span>\n  carInstance<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 메소드</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> carInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> car1 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> car2 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<h4>Functional Shared Instantiation</h4>\n<p>사용이 필요한 메소드만 인스턴스가 가져가므로 메모리효율이 좋음</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">pickMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">toInstance<span class=\"token punctuation\">,</span> methods</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    toInstance<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> methods<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> carMethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncarMethods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">carClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> carInstance <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    position<span class=\"token operator\">:</span> num<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">pickMethod</span><span class=\"token punctuation\">(</span>carInstance<span class=\"token punctuation\">,</span> carMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> carInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> car1 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> car2 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<h4>Prototypal Instantiation</h4>\n<p>실행컨텍스트 this와 Object.create() 메소드 활용</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> carMethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncarMethods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>positoin<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">carClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> carInstance <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>carMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  carInstance<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> carInstance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> car1 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> car2 <span class=\"token operator\">=</span> <span class=\"token function\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<h4>Pseudoclassical Instantiation</h4>\n<p>가장 일반적인 인스턴스 생성 방법이(었)다. new 키워드를 활용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">carClass</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ncarClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">move</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>position<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> car1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> car2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">carClass</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<br>\n<br>\n<h3>Prototype과 Prototype Chain</h3>\n<h4>Prototype</h4>\n<p>말 그대로 blue print, <strong>원형 객체</strong>를 의미한다. 자바스크립트는 프로토타입 언어이다.</p>\n<h4>constructor</h4>\n<p>인스턴스가 초기화될 때(=클래스로부터 만들때) 실행하는 생성자 함수를 의미</p>\n<h4>this</h4>\n<p>함수가 실행될 때 해당 <em>scope</em>마다 생성되는 고유한 실행컨텍스트로, new 키워드로 인스턴스를 생성했을 때는 해당 인스턴스가 바로 this 값이 된다.</p>\n<h4>Prototype Object(원본속성 그자체)</h4>\n<p>1) 객체는 언제나 함수에 의해 생성된다.(엄밀히는, 'Object'는 자바스크립트가 제공하는 고유함수이다.)<br>\n2) 모든 함수는 <strong>constructor</strong> 자격을 갖는다. 그렇기 때문에 함수는 new 키워드의 활용대상이 된다.<br>\n3) 'Human'이라는 클래스를 만들어보자. 그러면... 'Human.prototype'이라고 하는 자동 생성된 속성에서 constructor 정보와 __proto__(_Prototype Link_) 정보를 확인할 수 있게된다. 이것이 바로 Prototype Object 인 것이다.<br>\n4) 여기서 'Human.prototype.eyes'라는 메소드를 만들자. 이 메소드는 항상 2를 리턴한다. 그러면 이 { eyes: 2 }라는 key-value 속성이 Prototype Object의 속성 중 하나로 삽입된다.</p>\n<h4>Prototype Link(물려받은 원본속성)</h4>\n<p>5) 계속 이어서 생각해보자. 저 'Human' 클래스로부터 'smith'라는 인스턴스를 만든다.<br>\n6) 당연히 'smith'는 프로토타입이 아니기 때문에 <em>Prototype Object</em> 정보가 존재하지 않는다. 그런데 'smith.eyes'로 메소드를 실행할 수도 있고, 결과값 2도 확인할 수 있다.<br>\n7) 왜냐하면 이 'smith' 인스턴스의 __proto__(_Prototype Link_)에 자신의 Prototype Object가 명시(link)되어 있기 때문이다.<br>\n8) 이와 같이, 모든 객체는 반드시 __proto__(_Prototype Link_)를 가지며, 이는 자신의 prototype 정보, 즉, <strong>상속(유전)된 속성들을 항상 내장</strong>하기 위함이다. 이를 <strong>Prototype Chain</strong>(또는 <strong>[[Prototype]]</strong>)이라고 부른다.</p>\n<h3>간단한 Prototype 탐구</h3>\n<h4>HTML 환경에서</h4>\n<p>1) EventTarget은 모든 HTML element들의 시조 클래스인 객체이다. 따라서 .toString() 메소드를 쓸 수 있다.<br>\n2) Node는 EventTarget를 통해 만들어진 인스턴스이다. 따라서 .toString() <em>method</em>를 쓸 수 있다. 여기서 새롭게 .append() 메소드를 만들었다.<br>\n3) Element는 Node를 통해 만들어진 인스턴스이다. 따라서 .toString(), .append() 메소드를 쓸 수 있다.<br>\n4) HTMLElement는 Element를 통해 만들어진 인스턴스이다. 따라서 .toString(), .append() 메소드를 쓸 수 있다.<br>\n5) div는 HTMLElement를 통해 만들어진 인스턴스이다. 따라서 ....</p>\n<h4>Pseudoclassical Legacy pattern과 ES6 pattern 사이에서</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token comment\">// Human class와 method, instance 생성</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Human</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Human</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sleep</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> steve <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"steve\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Student class와 method, instance 생성</span>\n<span class=\"token comment\">// 단, class의 prototype과 method를 Human의 것 그대로를 복사해서 가져온다.</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Student</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">Human</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// prototype 및 method 복사</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Human</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// constructor 연결</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">learn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"열공!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// 복사된 sleep method를 그대로 쓰지 않고 리턴값 변형!!</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sleep</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token class-name\">Human</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"학생이 잠이나 자나?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// 확인</span>\n<span class=\"token keyword\">let</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"학생이 잠이나 자나?\"</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">learn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"열공!\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token comment\">// Human class와 method, instance 생성</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zzz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Student class와 method, instance 생성</span>\n<span class=\"token comment\">// 단, class의 prototype과 method를 Human의 것 그대로를 복사해서 가져온다.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// extends 키워드를 쓴다면 반드시 super 키워드도 함께 나와야 한다!!!</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 특별히 새로 정의하고 싶은 경우, super 키워드 다음 문장에 정의내용 기술!!</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"학생이 잠이나 자나?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">learn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"열공!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 확인</span>\n<span class=\"token keyword\">let</span> john <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"john\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"zzz\"</span>\njohn<span class=\"token punctuation\">.</span><span class=\"token function\">learn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"열공!\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","title":"Object Oriented Programming","category":"javascript","date":"10 Sep, 2020"}},"staticQueryHashes":["3649515864"]}