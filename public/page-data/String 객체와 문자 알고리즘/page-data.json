{"componentChunkName":"component---src-templates-post-template-tsx","path":"/String 객체와 문자 알고리즘","result":{"pageContext":{"html":"<h3>String 객체의 활용</h3>\n<h4>문자열 반환</h4>\n<p>입력받은 인덱스와 일치하는 문자열을 반환하는 메소드로 <strong>.charAt</strong>(index)과 <strong>.subString</strong>(startIndex[, endIndex])이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token string\">\"YouTube\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// T</span>\n\n<span class=\"token string\">\"YouTube\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">subString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// T</span>\n\n<span class=\"token string\">\"YouTube\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">subString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Tube</span>\n\n<span class=\"token string\">\"YouTube\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">subString</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Tube</span></code></pre></div>\n<br />\n<h4>인덱스 반환</h4>\n<p>입력받은 문자열의 가장 첫 문자와 일치하는 인덱스를 반환하는 메소드로 <strong>.indexOf</strong>(searchVale[, fromIndex])가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token string\">\"YouTube and Netflix\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"and\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 8</span>\n\n<span class=\"token string\">\"YouTube and Netflix\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Disney+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// -1</span>\n\n<span class=\"token string\">\"YouTube and Netflix\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"and\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 8</span>\n\n<span class=\"token string\">\"YouTube and Netflix\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"and\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 8</span></code></pre></div>\n<br />\n<h4>문자 'a'의 등장횟수</h4>\n<p><strong>indexOf</strong> 메소드를 활용하면 간단히 작성할 수 있다. 가장 문두에 있는 인덱스부터 반환하는 성질을 이용하여, 반복문을 통해 indexOf의 결과가 -1이 나올 때까지 시작 파라미터(fromIndex) 값을 1씩 증가시킨다. 시간복잡도는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>을 만족한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">countOnString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> result <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br />\n<h4>문자열 치환</h4>\n<p><strong>.replace</strong>(targetString, replaceString) 메소드는 타겟 문자열과 바꿀 문자열의 2개 파라미터를 받아 치환 작업을 수행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token string\">\"I subscribe to Netflix.\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Netflix\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Disney+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// I subscribe to Disney+.</span></code></pre></div>\n<br />\n<h3>정규표현식(Regular Expression)</h3>\n<p>검색 패턴을 정의한 문자열들의 집합으로, 당연히 이 RegExp 객체 형식에 맞추어 쓸 수 있는 메소드들이 존재한다.</p>\n<h4>정규표현식을 활용한 메소드</h4>\n<p>일반적으로 문자열에 대한 검색은 <strong>.search</strong>() 또는 <strong>.match</strong>() 메소드를 통해 가능하다. 만약 이 문자열을 <strong>RegExp 객체</strong>의 인스턴스로 만든다면 <strong>.test</strong>()와 <strong>.exec</strong>() 메소드를 사용할 수 있다. 이는 <strong>constructor</strong> 함수로 생성하든 <strong>리터럴</strong>로 생성하든 동일하게 적용된다. 이때 문자열에 대한 메소드 <strong>.match</strong>()와 RegExp 인스턴스에 대한 메소드 <strong>.exec</strong>()은 타겟과 비교대상의 순서가 반대일뿐, 동일한 결과를 도출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> strings <span class=\"token operator\">=</span> <span class=\"token string\">\"I Love Netflix\"</span><span class=\"token punctuation\">;</span></span>\nstrings<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Love\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 2</span>\n\nstrings<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Love\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Love\", index: 2, input: \"I Love Netflix\", groups: undefined]</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> regByCon <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Love\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"gi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\nregByCon<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Love\", index: 2, input: \"I Love Netflix\", groups: undefined]</span>\n\nregByCon<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> regByLit <span class=\"token operator\">=</span> <span class=\"token regex\">/Love/gi</span><span class=\"token punctuation\">;</span></span>\nregByLit<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [\"Love\", index: 2, input: \"I Love Netflix\", groups: undefined]</span>\n\nregByLit<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true;</span></code></pre></div>\n<br />\n<h4>기본 정규표현식</h4>\n<table>\n<thead>\n<tr>\n<th>표현식</th>\n<th>의미</th>\n<th>예시</th>\n<th>해석</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>문자열/줄이 <strong>시작</strong></td>\n<td>^[0-9]</td>\n<td>\"이 문자열은 숫자부터 시작된다.\"</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td><strong>모든 숫자</strong></td>\n<td>\\d+</td>\n<td>\"이 문자열에는 반드시 숫자가 포함된다.\"</td>\n</tr>\n<tr>\n<td>[xy]</td>\n<td>괄호 안의 문자/숫자를 <strong>검색</strong></td>\n<td>[a-zA-Z0-9]</td>\n<td>\"이 문자열은 숫자와 알파벳만 포함된다.\"</td>\n</tr>\n<tr>\n<td>[^xy]</td>\n<td>괄호 안의 문자/숫자를 <strong>제외하고 검색</strong></td>\n<td>[^xy]</td>\n<td>\"이 문자열은 x와 y를 포함하지 않는다\"</td>\n</tr>\n<tr>\n<td>(x | y)</td>\n<td>x 또는 y를 검색</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<br />\n<h4>쿼리 문자열</h4>\n<p><code class=\"language-text\">/([^?=&amp;]+)(=([^&amp;]\\*))/</code>로 표현되며, 웹 URL로부터 데이터베이스 쿼리들을 <strong>파싱</strong>(parsing)하기 위해 유용하게 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> queryString <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> uri <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"https://your.domain/product.js?category=4&amp;product_id=2140&amp;query=lcd+tv\"</span><span class=\"token punctuation\">;</span>\n\nuri<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"([^?=&amp;]+)(=([^&amp;]*))?\"</span><span class=\"token punctuation\">,</span></span>    <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">2</span><span class=\"token punctuation\">,</span> $<span class=\"token number\">3</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    queryString<span class=\"token punctuation\">[</span>$<span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> $<span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>queryString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { category: 4, product_id: 2140, query: lcd+tv }</span></code></pre></div>\n<br />\n<h4>숫자를 포함하는 문자열</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> includeNum <span class=\"token operator\">=</span> <span class=\"token regex\">/\\d+/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 적어도 숫자를 포함한다</span></span>includeNum<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nincludeNum<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12a3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nincludeNum<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> onlyNum <span class=\"token operator\">=</span> <span class=\"token regex\">/^\\d+$/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 반드시 숫자만 포함한다</span></span>onlyNum<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nonlyNum<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"12a3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nonlyNum<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> floatNum <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]*.[0-9]*[1-9]+$/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 적어도 부동소수점을 포함한다</span></span>floatNum<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nfloatNum<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.23\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<br />\n<h4>적어도 숫자 또는 문자를 포함하는 문자열</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">let</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-zA-Z0-9]/</span><span class=\"token punctuation\">;</span></span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nreg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ILoveNetflix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nreg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I Love Netflix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nreg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I Love 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nreg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I Love Netflix, Disney+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nreg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<br />\n<h3>인코딩</h3>\n<h4>Base64 인코딩</h4>\n<p>문자열을 입력받아 Base64로 인코딩된 <strong>ASCII</strong> 문자열을 반환한다. 이때 문자열의 각 문자는 바이트(=8bit)로 취급된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">btoa</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I Love Netflix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"SSBMb3ZlIE5ldGZsaXg=\"</span>\n\n<span class=\"token function\">atob</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SSBMb3ZlIE5ldGZsaXg=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"I Love Netflix\"</span></code></pre></div>\n<br />\n<h4>Bit.ly</h4>\n<p>데이터베이스에 URL에 대한 ID 정보가 있음을 기반으로, 해당 ID를 Base64 인코딩을 통해 ASCII 문자열로 변환한다. 이때 Base64 인코딩은 단순히 btoa나 atob 메소드를 사용하는 것이 아닌, 아래의 알고리즘을 이용할 수 있다. 각 함수들은 최소 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><msub><mrow></mrow><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mi>r</mi><mi>e</mi><mi>t</mi><mi>N</mi><mi>u</mi><mi>m</mi></mrow></msub><mrow><mi>i</mi><mi>d</mi></mrow><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log{_{secretNum}}{id})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\"><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">s</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">m</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span></span><span class=\"mclose\">)</span></span></span></span>, 최대 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>의 시간복잡도를 갖는다고 추정할 수 있을 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token comment\">// 인코딩용 DICTIONARY 설정</span>\n<span class=\"token keyword\">let</span> <span class=\"token constant\">DICTIONARY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMONPQRSTUVWXYZ0123456789\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> secretNum <span class=\"token operator\">=</span> <span class=\"token number\">34</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// URL ID 인코딩 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">encodeId</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">DICTIONARY</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 문자 역순생성 헬퍼함수</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverseWord</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> reversed <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      reversed <span class=\"token operator\">=</span> reversed <span class=\"token operator\">+</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> reversed<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 인코딩</span>\n  <span class=\"token keyword\">let</span> encoded <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    encoded <span class=\"token operator\">=</span> encoded <span class=\"token operator\">+</span> <span class=\"token constant\">DICTIONARY</span><span class=\"token punctuation\">[</span>id <span class=\"token operator\">%</span> secretNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    id <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">/</span> secretNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">reverseWord</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Bit.ly 디코딩 함수</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">decodeId</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">encoded</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> decoded <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> encoded<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    decoded <span class=\"token operator\">=</span> decoded <span class=\"token operator\">*</span> secretNum <span class=\"token operator\">+</span> <span class=\"token constant\">DICTIONARY</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> decoded<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">encodeId</span><span class=\"token punctuation\">(</span><span class=\"token number\">12345</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// DB에 저장된 https://netflix.com의 id가 12345라고 가정하면</span>\n<span class=\"token comment\">// \"kxd\"</span>\n\n<span class=\"token function\">decodeId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kxd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 12345</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br />\n<h3>암호화</h3>\n<p>암호화는 서버와 클라이언트(브라우저) 간 연결에 활용되는 표준 보안 기술이다. <strong>TLS</strong>가 가장 대표적인 암호화 과정이라고 할 수 있으며 아래의 흐름으로 요약된다.</p>\n<ol>\n<li>1) 서버가 브라우저에게 자신의 <strong>비대칭 공개키</strong>를 전송하면,</li>\n<li>2) 브라우저는 <strong>현재 세션</strong>에서 사용하기 위해 <strong>대칭키</strong>를 생성한다. 그리고 이것을 서버로부터 받은 비대칭 공개키를 활용하여 <strong>암호화</strong>한다.</li>\n<li>3) 이제부터 클라이언트 세션이 생성되면 브라우저는 가지고 있는 <strong>암호화된 대칭키</strong>를 서버에게 보내게 된다. 서버는 이것을 자신이 가지고 있는 비대칭 공개키를 활용하여 <strong>복호화</strong>하여 정상 사용자임을 확인한다.</li>\n</ol>\n<p>이러한 암호화를 위해 활용되는 가장 대표적인 것은 <strong>RSA 암호화</strong>이다.</p>\n<h4>RSA 암호화</h4>\n<p>RSA 암호화는 큰 정수의 인수분해를 활용한 암호화 알고리즘이다. 크기가 매우 큰 두 소수와 보조값 1개를 통해 공개키가 생성된다. 이를 가지고 누구나 암호화를 할 수 있으며, 단, 복호화를 하기 위해선 <strong>소인수</strong>를 보유하고 있어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 크기가 큰 임의의 두 소수와 그 곱을 선언한다</span>\n<span class=\"token comment\">// 이를 위해 지난 소수 관련 포스팅의 함수를 활용한다</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">allPrimesLessThanN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isPrime</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> prime1 <span class=\"token operator\">=</span> <span class=\"token function\">allPrimesLessThanN</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234567</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1234547</span>\n<span class=\"token keyword\">let</span> prime2 <span class=\"token operator\">=</span> <span class=\"token function\">allPrimesLessThanN</span><span class=\"token punctuation\">(</span><span class=\"token number\">4567890</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4567873</span>\n<span class=\"token keyword\">let</span> pxp <span class=\"token operator\">=</span> prime1 <span class=\"token operator\">*</span> prime2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5639253908531</span>\n\n<span class=\"token comment\">// 암호화</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">modInverse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exponent<span class=\"token punctuation\">,</span> pxp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> message0 <span class=\"token operator\">=</span> pxp<span class=\"token punctuation\">,</span>\n    temp<span class=\"token punctuation\">,</span>\n    prime2<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> encoded0 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    encoded1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pxp <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>exponent <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    prime2 <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>exponent <span class=\"token operator\">/</span> pxp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> pxp<span class=\"token punctuation\">;</span>\n    pxp <span class=\"token operator\">=</span> exponent <span class=\"token operator\">%</span> pxp<span class=\"token punctuation\">;</span>\n    exponent <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n\n    temp <span class=\"token operator\">=</span> encoded0<span class=\"token punctuation\">;</span>\n    encoded0 <span class=\"token operator\">=</span> encoded1 <span class=\"token operator\">-</span> prime2 <span class=\"token operator\">*</span> encoded0<span class=\"token punctuation\">;</span>\n    encoded1 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>encoded1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> encoded1 <span class=\"token operator\">=</span> encoded1 <span class=\"token operator\">+</span> message0<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> encoded1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br />\n<br />\n<br />\n<br />\n<p><text style=\"color:gray\"><em>*참고: \"자바스크립트로 하는 자료 구조와 알고리즘\"(배세민님, 에이콘)</em></text></p>","title":"String 객체와 문자 알고리즘","category":"algorithm","date":"05 Jan, 2021"}},"staticQueryHashes":["3649515864"]}