{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"'사용자 인터페이스를 만들기 위한 JavaScript 라이브러리' - ko.reactjs.org 리액트는 페이스북에서 개발한 자바스크립트 라이브러리이다. 이 라이브러리는 컴포넌트라고 불리는 작은 파편들을 이용하여 사용자 인터페이스를 고도화하는 원리를 갖는다. 일반적으로 이 컴포넌트들은 초기에 React.Component…","frontmatter":{"title":"React란","path":"/react/react01","date":"27 Sep, 2020","category":"react"},"id":"f986ae5f-efcb-52f3-977c-38a6e0c9e08c"}},{"node":{"excerpt":"어제까지로 첫번째 팀 프로젝트가 종료되었다. '성료'가 아닌 종료라는 점에서 매우 아쉬움이 남는 프로젝트였다. 명과 암이 동시에 보였다고 하기엔 개선해야 할 점이 너무나 많이 확인된 프로젝트였다. 개발스택 Front-end 나는 이번 프로젝트에서 프론트엔드 개발을 담당하였다. 이를 위해 를 통해 react 라이브러리 환경(17.0.1)을 구성했다. SPA…","frontmatter":{"title":"1st Project 회고","path":"/react/react02","date":"21 Nov, 2020","category":"react"},"id":"50ff757c-b264-5326-ae3c-2026070a6389"}},{"node":{"excerpt":"4주간 수행한 Final 프로젝트가 12월 20일(일)에 드디어 종료되었다. 공식적으로는 12월 18일(금) 종료지만, 여러 기능 개선과 CSS 마무리 작업을 남은 이틀의 주말간 수행했다. 1st…","frontmatter":{"title":"Final Project 회고","path":"/react/react03","date":"20 Dec, 2020","category":"react"},"id":"2a365bdc-c375-531a-8a6e-a7576b032638"}},{"node":{"excerpt":"앞서 작성한 Final 프로젝트 회고글에 대한 appendix이다. 프로젝트를 수행하면서 굵직한 이슈에 부딪힐 때마다 나의 든든한 동료인 iPad Air 4(아낌없이 보급지원해주신 내무부장관님께 심심한 감사를 드린다)와 나눈 필담들이다. 아래의 모든 내용들은 작성 즉시 수시로 팀원들에게 Slack으로 공유하여 여러 화두를 이끌어내었다. 사진 업로드 설계…","frontmatter":{"title":"Final Project 회고(2)","path":"/react/react04","date":"27 Dec, 2020","category":"react"},"id":"64f91a90-2573-518d-a72a-c619bc09e7ae"}},{"node":{"excerpt":"리덕스(Redux)는 자바스크립트 기반의 상태 관리 라이브러리이다. 여기서 상태(state)를 관리한다는 것은 리액트에서 매우 중요한 의미를 갖는다. 리액트는 컴포넌트 간 부모-자식 관계를 활용하여 props 상속을 구현한다. 이러한 props는 각 컴포넌트에서 각 상태에 반영될텐데(이는 컴포넌트 라이프사이클에서 getDerivedStateFromProps…","frontmatter":{"title":"리덕스(Redux) 라이브러리","path":"/react/react04","date":"25 Jan, 2021","category":"react"},"id":"219b20b7-9810-5a81-8e7e-71f5ba2c27d2"}},{"node":{"excerpt":"Node.js의 태동 서버를 만드는 개발도구로, 2009년 Ryan Dahl이 비동기 입출력(Asynchronouse & Non-Blocking I/O)의 니즈를 토대로 만들었다고 한다. 이전까지는 클라이언트(웹 환경이라면 '브라우저', 시스템 환경이라면 '프로그램')에서 데이터를 서버(웹 환경이라면 '웹 서버', 시스템 환경이라면 'OS…","frontmatter":{"title":"Node.js란","path":"/nodejs/nodejs01","date":"11 Oct, 2020","category":"nodejs"},"id":"35062679-39e2-5f9f-abae-a1f2327dcb5a"}},{"node":{"excerpt":"Node.js 프로그램 실행 process 객체와 argv 속성 process 객체에는 기본적으로 node 프로그램 실행 프로세스와 관련한 내용들이 argv 속성, env 속성 등의 정보가 포함된다. 이중 argv 속성은 node 기본 실행파일 정보와, node 명령어를 통해 실행하는 파일의 경로 정보가 담겨져있다. argv 속성의 모습 Node.js…","frontmatter":{"title":"기본구동","path":"/nodejs/nodejs02","date":"12 Oct, 2020","category":"nodejs"},"id":"acd35146-a073-5545-b219-1aef8ea3d4ac"}},{"node":{"excerpt":"단방향 암호화 암호는 보통 두가지의 취급방식을 가정한다. 하나는 암호화(encrypt), 다른 하나는 복호화(decrypt…","frontmatter":{"title":"crypto","path":"/nodejs/nodejs03","date":"03 Nov, 2020","category":"nodejs"},"id":"6d982e30-a5d2-5e12-b24b-34b38a0528f7"}},{"node":{"excerpt":"'OAuth is an open standard for access delegation, commonly used as a way for Internet users to grant websites or applications access to their information on other websites but without giving them the…","frontmatter":{"title":"OAuth2.0","path":"/nodejs/nodejs04","date":"04 Nov, 2020","category":"nodejs"},"id":"620c48bc-b21a-5d48-9fb0-df0af79155f2"}},{"node":{"excerpt":"'The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true.' - MDN 반복문(loop)은 반복의 조건(condition)이 true일 때까지만 특정명령(statement…","frontmatter":{"title":"while 반복문","path":"/javascript/mil02","date":"05 Aug, 2020","category":"javascript"},"id":"f664eca5-213a-5ebc-8bb9-589b6419ef3f"}},{"node":{"excerpt":"'The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed…","frontmatter":{"title":"for 반복문(1)","path":"/javascript/mil03","date":"07 Aug, 2020","category":"javascript"},"id":"bdf75725-5f27-5d6c-ae4d-8c11107a2145"}},{"node":{"excerpt":"두개 이상의 for 반복문을 중첩적으로도 사용할 수 있다. 이를 이중 for문이라고 흔히 말한다. 바로 행렬(matrix)이 이중 for문으로 생각할 수 있는 대표적인 사례이다. 예를 들어 3x3 행렬을 가정한다면, 행과 열의 조합은 일 때  일 때  일 때  로 표현할 수 있다. 이중 for…","frontmatter":{"title":"for 반복문(2)","path":"/javascript/mil04","date":"10 Aug, 2020","category":"javascript"},"id":"bbb96029-3484-52a3-be05-3a665db63463"}},{"node":{"excerpt":"'The forEach() method executes a provided function once for each array element.' - MDN while이나 for 반복문 이외에도, forEach 메소드(method)를 통한 반복문 실행의 방법이 존재한다. 단, forEach는 메소드이기 때문에, 반복하기를 희망하는 '함수(function…","frontmatter":{"title":"forEach","path":"/javascript/mil05","date":"12 Aug, 2020","category":"javascript"},"id":"97cc5c39-cab7-572e-9aea-54d935afe967"}},{"node":{"excerpt":"map 메소드 'The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value.' - MDN map…","frontmatter":{"title":"map과 filter","path":"/javascript/mil06","date":"14 Aug, 2020","category":"javascript"},"id":"95a92eff-10c1-561e-8cd1-4a47610e994a"}},{"node":{"excerpt":"'The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in single output value.' - MDN reduce 메소드는 MDN reference에 나온 정의 그대로, 어떤 배열을 주어진 함수(reducer…","frontmatter":{"title":"reduce","path":"/javascript/mil07","date":"17 Aug, 2020","category":"javascript"},"id":"822d665c-6c9a-54ed-aeea-e2cfc34f41e5"}},{"node":{"excerpt":"함수의 범위(Scope) 'The current context of execution. The context in which values and expressions are \"visible\" or can be referenced. If a variable or other expression is not \"in the current scope,\" then…","frontmatter":{"title":"scope와 block","path":"/javascript/mil08","date":"19 Aug, 2020","category":"javascript"},"id":"f6baf2d0-77d6-5b3a-8cbf-b3c55709dc8d"}},{"node":{"excerpt":"Git Workflow Upstream Repository 각 Pair들은 이 Upstream Repository를 Fork하여 자신의 github로 모셔옴 Forked Repository Local Repository Branch Strategy…","frontmatter":{"title":"Git","path":"/javascript/mil09","date":"31 Aug, 2020","category":"javascript"},"id":"db65a255-c414-57d6-a0fe-335f9378f4b4"}},{"node":{"excerpt":"Arrow Function(화살표함수) 'function' 키워드를 화살표로 축약할 수 있다. 이때 return과 중괄호(curly brackets)도 생략한다. 이러한 화살표함수는 클로저(Closure)를 사용할 때 매우 유리하다. 단, 화살표함수는 .apply(), .call(), .bind() 메소드에 사용할 수 없다. 왜냐하면 이러한 .apply…","frontmatter":{"title":"this, apply, call 그리고 bind","path":"/javascript/mil10","date":"02 Sep, 2020","category":"javascript"},"id":"557620b9-d5ad-5e2f-89f0-604b2085875b"}},{"node":{"excerpt":"esLint 설치 공홈에서 알려주는데로 차근차근 설치하면 된다. 1)  (devDependencies에 추가하는 설치) 2)  (검열 기초설정: CommonJS를 주로 볼 것인가, node 환경인가 등등) 3) 생성된 eslintrc.js 파일에서 \"env\"와 \"rules\" 객체에다가 필요한 환경이나 검열규칙 추가하면 됨 4) package.json…","frontmatter":{"title":"esLint","path":"/javascript/mil11","date":"03 Sep, 2020","category":"javascript"},"id":"2b15b30d-b96d-54be-b736-454ac233bdce"}},{"node":{"excerpt":"Data의 의미 1) data : 문자, 숫자, 소리, 그림, 영상, 단어 등의 형태로 된 의미단위 2) data type : Primitive type(Numeric, String, Boolean 등), Custom type(Class, Struct;구조체 등) 3) data structure : 여러 data…","frontmatter":{"title":"Stack과 Queue","path":"/javascript/mil12","date":"04 Sep, 2020","category":"javascript"},"id":"f7435aeb-abbe-5b6b-9907-08d8429393c3"}},{"node":{"excerpt":"Linked List data와 pointer로 구성된 node가 선형(linear) 연결을 구성함으로써 데이터 구조를 만든 것 장점 배열에 비해 data의 추가나 삭제가 매우 빠르고 메모리를 운용하는 방식은 상대적으로 효율적이다. 단점 배열에 비해 탐색과 정렬에 매우 느리고, 기본적으로 pointer만큼의 추가 메모리 소모가 있다. 예시 FAT3…","frontmatter":{"title":"Linked List와 Hash Table","path":"/javascript/mil13","date":"07 Sep, 2020","category":"javascript"},"id":"14aaf3d8-ef9d-58bf-aa4a-01ed00b1c267"}},{"node":{"excerpt":"Graph vertex(정점) 또는 node를 연결하는 edge(간선)으로 구성된 자료구조 예시 웹사이트(V:페이지, uE:링크), 지도(V:교차로, dE:도로), SNS(V:회원, uE:친구맺기) 등 종류 1) 무방향(Undirected Graph) : 일명 '대칭' graph로, 한 edge에 두 vertex가 방향성 없이 대칭적으로 연결됨…","frontmatter":{"title":"Graph, Tree 그리고 BST","path":"/javascript/mil14","date":"08 Sep, 2020","category":"javascript"},"id":"1ffc3002-01bf-5a3a-ae37-6fa91df1ef9e"}},{"node":{"excerpt":"객체지향 프로그래밍 사람이 세계를 보고 이해한 것을 컴퓨터 프로그래밍으로 흉내낸 것을 의미한다. 1) Machinery Language : 0과 1로만 조합 2) Assembly Language : 만들어진 변수(r1 ~ r10), 정해진 규칙(swperm, xor, sieve 등)으로만 조합 3) High-level Language…","frontmatter":{"title":"Object Oriented Programming","path":"/javascript/mil16","date":"10 Sep, 2020","category":"javascript"},"id":"2526cf1a-c0a7-553c-8df4-ce9c23bef3f8"}},{"node":{"excerpt":"esLint에서 검열규칙 완화하기 ES6 instantiation pattern Pseudoclassical instantiation pattern","frontmatter":{"title":"ES6 vs Pseudoclassical","path":"/javascript/mil17","date":"14 Sep, 2020","category":"javascript"},"id":"058ca25e-9e57-5cf9-8da8-a51d32d592b2"}},{"node":{"excerpt":"클래스 constructor 함수 constructor란, 클래스가 자식(=인스턴스)에게 물려줄 유전형질(프로토타입)을 정의해주는 역할을 수행한다. 아래는 'Dance Party' 스프린트에서 발췌한 코드이다. 인스턴스가 사용할 수 있는 메소드를 constructor…","frontmatter":{"title":"constructor","path":"/javascript/mil18","date":"14 Sep, 2020","category":"javascript"},"id":"f22d9f24-03a7-5634-af3b-0d4acdb692e1"}},{"node":{"excerpt":"Asynchronous 클라이언트의 요청을 비동기적(asynchronously)으로 서버가 처리해준다면, 클라이언트는 일단 작업을 요청한 이후로도 다른 작업을 진행/요청할 수 있게 된다. 만약 서버가 동기적(synchronously) 처리만 가능하다면 클라이언트는 서버의 처리가 끝날 때까지 대기해야 한다. callback…","frontmatter":{"title":"promise","path":"/javascript/mil20","date":"21 Sep, 2020","category":"javascript"},"id":"ca71c4a7-d471-526b-b268-81b6d1a52334"}},{"node":{"excerpt":"비동기처리가 가능한 상황 (시간지연 등을 활용한)애니메이션을 구현하고자 할때 setTimeout(), setInterval() 등의 메소드에 콜백을 담는 경우이다. 콜백을 대체하고자 할때 1. 기존 콜백상황 2. 프로미스 객체(resolve, reject 속성)를 활용하는 경우 3. 프로미스 객체들의 비동기처리 체이닝(then 키워드)을 활용하는 경우…","frontmatter":{"title":"Asynchronous","path":"/javascript/mil21","date":"22 Sep, 2020","category":"javascript"},"id":"8f9ada9f-722c-520a-981d-2b8fc9b2c5ef"}},{"node":{"excerpt":"'an application-layer protocol for transmitting hypermedia documents, such as HTML. It was designed for communication between web browsers and web servers' - MDN 웹 서버로부터 HTML 문서를 거둬들여서(fetch…","frontmatter":{"title":"HTTP","path":"/javascript/mil22","date":"23 Sep, 2020","category":"javascript"},"id":"b8fce82a-1bcf-5c75-86ad-6c4f2efa047d"}},{"node":{"excerpt":"자바스크립트로 할 수 있는 것 1) AJAX call을 통해 API를 호출 2) 다이나믹하게 DOM 제어 3) 인증정보를 브라우저에 저장 4) 인증정보를 불러오기 자바스크립트를 통한 공격 XSS(Cross-Site Scripting) 브라우저가 서버를 신뢰하기 때문에 가능한 공격이다. 단, Chrome V8 엔진 이후로는 이러한 XSS…","frontmatter":{"title":"브라우저 보안과 CORS","path":"/javascript/mil23","date":"24 Sep, 2020","category":"javascript"},"id":"44119c77-66e3-59c5-bdf2-e24ec5442ea9"}},{"node":{"excerpt":"'REST is acronym for REpresentational State Transfer. It is architectural style for distributed hypermedia systems and was first presented by Roy Fielding in 2000 in his famous dissertation.' - https…","frontmatter":{"title":"RESTful API","path":"/javascript/mil24","date":"24 Sep, 2020","category":"javascript"},"id":"84639541-81a9-5d5f-905a-632e082753a5"}},{"node":{"excerpt":"비트연산자는 말그대로 주어진 데이터를 비트 단위로 쪼개어 연산하기 위한 도구이다. 크게 &, |, ^, ~, <<, >> 정도가 있다. 연산자 이름 의미 & 엠퍼센트 AND | 파이프 OR ^ 캐럿 XOR ~ 틸드 NOT << 왼쪽 이중 앵글 왼쪽 이동 >> 오른쪽 이중 앵글 오른쪽 이동 예를 들어 정수 9가 주어졌을 때 7 <<…","frontmatter":{"title":"비트연산자","path":"/javascript/mil19","date":"15 Jan, 2021","category":"javascript"},"id":"62a2c76b-2ee3-5b0b-90a7-9143dc638b80"}},{"node":{"excerpt":"재귀를 통해 조합 구하기 정수로 이뤄진 배열 1,2,3,4,5,6에서 4개의 항목을 순서와 상관없이 고르는 경우를 생각해보자. 학창시절에 배운 수학적인 접근에 의하면 다음과 같이 조합의 경우를 생각할 수 있다. combination_human 이를 컴퓨터가 구하도록 한다면, 첫번째 고르는 항목을 고르고나서 나머지 3개 항목을 구하는 식으로 총…","frontmatter":{"title":"재귀 이해하기","path":"/javascript/mil25","date":"18 Jan, 2021","category":"javascript"},"id":"a775f3f4-c290-54ed-9481-2b911568737d"}},{"node":{"excerpt":"기존의 function 키워드 대신 화살표(=>)를 사용하여 간단히 함수 선언문을 표현한 것을 말한다. 화살표함수는 익명함수로만\u001c 호출되기 때문에 함수 표현식으로만 구현되며, 다음과 같은 특성을 갖는다. 화살표함수의 특징 바인딩되지 않는 this 원래 this는 그것의 실행 컨텍스트에 따라 1) 전역범위에서 사용될때 : 전역객체…","frontmatter":{"title":"화살표함수","path":"/javascript/mil26","date":"28 Jan, 2021","category":"javascript"},"id":"afc574f4-aa03-5da8-81fc-459b5264632f"}},{"node":{"excerpt":"자바스크립트와 관련된 모든 TIL 포스팅은 '자바스크립트로 하는 자료 구조와 알고리즘' 에 대한 Self Study이다. 물론 해당 서적에 대한 TIL뿐만 아니라, 현재 진행 중인 코딩 부트캠프와 관련해서도 기록 예정이다. 물론 저작권을 침해하지 않는 범위에서 포스팅을 이어나갈 것이다. 그럼... BigO…","frontmatter":{"title":"BigO","path":"/algorithm/algorithm01","date":"03 Oct, 2020","category":"algorithm"},"id":"d109fdcf-9546-549e-aba8-4f2c0b14d30f"}},{"node":{"excerpt":"문제 주어진 행렬이 정사각형() 행렬이든 직사각형() 행렬이든지에 상관없이, 의 시계방향 또는 반시계방향 회전이 가능한 함수를 작성하라. Reference 참고로 위의 3~5번째 줄의 기본조건 수립은 문제 해결에 반드시 필요하다. 파라미터 direction의 정의가 없다면 행렬 회전을 규정할 수 없게 된다. 또한 5~6번째 줄과 같은 변수 m과 n…","frontmatter":{"title":"행렬회전","path":"/algorithm/algorithm02","date":"25 Oct, 2020","category":"algorithm"},"id":"2be56d79-8d1c-582d-b846-bf4b13182c8c"}},{"node":{"excerpt":"문제 트럼프 카드로 이루어진 배열이 주어졌을 때, 그 카드들을 섞는 함수를 작성하라. (힌트는 아니지만, 일반적으로 트럼프 카드를 나열하는 방법은 다음과 같다.) Reference 간단한 정렬 알고리즘을 통해 4~8번째 줄과 같은 shuffler 함수를 만들어서 for 문에 이를 활용한다. 이때, Math.random…","frontmatter":{"title":"카드섞기","path":"/algorithm/algorithm03","date":"25 Oct, 2020","category":"algorithm"},"id":"dff97027-c4c7-5de3-a96d-af79916897bd"}},{"node":{"excerpt":"문제 삼세판 이상의 게임(판, round) 당 낼 수 있는 가위, 바위, 보의 경우의 수를 구하여 리턴하라. Reference 코드의 13~15번째 줄과 같이 재귀를 활용해야 가위바위보 경우의 수 나열을 완성할 수 있다. 또한, 9~10번째 줄은 이 재귀함수의 탈출조건(round = 0이면 return하고 끝)이 된다.","frontmatter":{"title":"가위바위보","path":"/algorithm/algorithm04","date":"26 Oct, 2020","category":"algorithm"},"id":"4192d729-e2ec-5c1b-b2ce-568965f0d12c"}},{"node":{"excerpt":"문제 배열을 인자로 받아 그것의 엘리먼트들을 크기 순서대로 정렬한 배열을 반환하라. (\n단, 자바스크립트의 내장 함수 Array.prototype.sort는 사용 금지) Reference…","frontmatter":{"title":"버블정렬","path":"/algorithm/algorithm05","date":"31 Oct, 2020","category":"algorithm"},"id":"f97eb4fc-5184-5a75-961b-178435d5ab56"}},{"node":{"excerpt":"문제 두 개 이상의 문자열을 매개변수로 받아, 그것들이 공통으로 가지고 있는 문자를 순서대로 반환하라.(공백, 중복 제외) Reference 25번째 줄에서 Array.prototype.slice 메소드를 사용하면서 call과 arguments를 활용한 것에 주목하자. 함수에 주어지는 인자들을 arguments…","frontmatter":{"title":"공통글자","path":"/algorithm/algorithm06","date":"31 Oct, 2020","category":"algorithm"},"id":"c39e0196-a9e7-5188-b95b-7130507384b9"}},{"node":{"excerpt":"문제 값이 Number 타입인 value와, 값이 배열인 children을 속성으로 갖는 Node 객체를 입력받아, 깊이우선탐색이 수행된 순서대로 value들을 배열에 저장하여 리턴하라. 입출력 예시 Reference 일반적으로 DFS(깊이우선탐색)은 모든 정점(vertex…","frontmatter":{"title":"DFS(깊이우선탐색)","path":"/algorithm/algorithm07","date":"02 Jan, 2021","category":"algorithm"},"id":"54003f4d-69d9-58a8-a315-fcafbca38e56"}},{"node":{"excerpt":"문제 값이 Number 타입인 value와, 값이 배열인 children을 속성으로 갖는 Node 객체를 입력받아, 너비우선탐색이 수행된 순서대로 value들을 배열에 저장하여 리턴하라. 입출력 예시 Reference 일반적으로 BFS(너비우선탐색) 또한 직전 포스팅에서 살펴본 DFS와 마찬가지로 모든 정점(vertex…","frontmatter":{"title":"BFS(너비우선탐색)","path":"/algorithm/algorithm08","date":"02 Jan, 2021","category":"algorithm"},"id":"6db53737-1074-5367-9393-96de2ae533cf"}},{"node":{"excerpt":"…","frontmatter":{"title":"Big 'O'(빅오표기법)","path":"/algorithm/algorithm09","date":"03 Jan, 2021","category":"algorithm"},"id":"fa406216-1e71-5013-b0dc-b5ac91770ab8"}},{"node":{"excerpt":"자바스크립트는 64비트 부동소수점으로 숫자를 표현한다. 63번째 비트는 부호(sign)을 표현하며 1이면 음수이다. 62번째부터 52번째 비트는 지수(값)을 표현한다. 그리고 51번째 비트부터 나머지 비트는 소수를 표현한다. 이는 다음의 공식으로 계산된다고 한다.  Number 객체의 활용 Number.EPSILON…","frontmatter":{"title":"Number 객체와 숫자 알고리즘","path":"/algorithm/algorithm10","date":"04 Jan, 2021","category":"algorithm"},"id":"75d31fac-828a-59b1-9690-3f1c399b37b1"}},{"node":{"excerpt":"String 객체의 활용 문자열 반환 입력받은 인덱스와 일치하는 문자열을 반환하는 메소드로 .charAt(index)과 .subString(startIndex, endIndex)이 있다. 인덱스 반환 입력받은 문자열의 가장 첫 문자와 일치하는 인덱스를 반환하는 메소드로 .indexOf(searchVale, fromIndex)가 있다. 문자 'a…","frontmatter":{"title":"String 객체와 문자 알고리즘","path":"/algorithm/algorithm11","date":"05 Jan, 2021","category":"algorithm"},"id":"d02e9627-5106-53d1-aff5-a25b603df0ae"}},{"node":{"excerpt":"배열 기초 원본제어 slice 메소드 slice는 원본을 참조하여 새로운 배열을 리턴한다. 참조한다는 것이 매우 중요한데, 만약 slice 메소드로 복사한 배열의 항목을 변경하면 원본 배열의 항목도 변경된다. Array.from 메소드 위의 slice 메소드의 참조특성을 피하고 완전히 새로운 배열로 원본 배열을 복사하고자 할 때 쓰인다. splice…","frontmatter":{"title":"배열과 알고리즘(1)","path":"/algorithm/algorithm12","date":"06 Jan, 2021","category":"algorithm"},"id":"ec3765ea-9f35-5f86-a611-371a96f45c5d"}},{"node":{"excerpt":"배열 알고리즘 합쳐서 어떤 수가 나오는 배열의 항목 쌍 찾기 예를들어 1,2,3,4,5,6,7,8,9와 9가 인자로 주어질 때, 합쳐서 9가 나오는 수는 2와 7, 3과 6, 4와 5의 조합이 있다. 간단히 이중 for 루프를 이용할 수 있다. 이중 for…","frontmatter":{"title":"배열과 알고리즘(2)","path":"/algorithm/algorithm13","date":"06 Jan, 2021","category":"algorithm"},"id":"36e03e8d-c57a-54b1-a401-b0d645af2a86"}},{"node":{"excerpt":"Programmers 문제 1. 제한사항 board 배열은 2차원 배열로, 크기는 \"5 X 5\" 이상 \"30 X 30\" 이하이다. board 각 칸에는 정수가 있는데 0은 빈칸, 1 ~ 100은 인형, 같은 숫자는 같은 인형을 의미 moves 배열의 크기는 1 이상 1,000 이하 moves 배열의 각 원소들의 값은 1 이상이며 board…","frontmatter":{"title":"크레인 인형뽑기","path":"/algorithm/algorithm14","date":"07 Jan, 2021","category":"algorithm"},"id":"0a8028cb-1043-577c-b52c-ac4d79815b97"}},{"node":{"excerpt":"Programmers 문제 아래와 같이 길이가 bridge_length인 다리에, 길이가 1인 트럭들이 지나가려고 한다. 0. 문제    시간(초) 다리를 건넌 트럭 다리를 건너고 있는 트럭 대기 중인 트럭 0 [] [] 7,4,5,6 1~2 [] 7 4,5,6 3 7 4 5,6 4 7 4,5 6 5 7,4 5 6 6~7 7,4,5 6 [] 8 7,4,…","frontmatter":{"title":"다리를 지나는 트럭","path":"/algorithm/algorithm15","date":"08 Jan, 2021","category":"algorithm"},"id":"34ee80ff-14a5-5d01-8dc2-9555c6bf3769"}},{"node":{"excerpt":"Programmers 문제 1) 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다. 2) 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다. 3) 그렇지 않으면 J를 인쇄합니다. 위의 규칙을 갖는 프린터를 통해, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고자 한다.…","frontmatter":{"title":"프린터","path":"/algorithm/algorithm16","date":"09 Jan, 2021","category":"algorithm"},"id":"afd7bc6e-4190-5989-a549-29a34c93acb0"}},{"node":{"excerpt":"…","frontmatter":{"title":"메모리 관리","path":"/algorithm/algorithm17","date":"10 Jan, 2021","category":"algorithm"},"id":"3be224d4-95e5-580e-aca4-3838cef7ca38"}},{"node":{"excerpt":"…","frontmatter":{"title":"재귀","path":"/algorithm/algorithm18","date":"10 Jan, 2021","category":"algorithm"},"id":"756a6888-b452-5c7f-a3f9-d678c1dccb8f"}},{"node":{"excerpt":"집합은 정렬되지 않은 유일한(중복되지 않는) 항목들의 그룹이다. 집합은  상수 시간에 유일한 항목을 확인하고 추가할 수 있다. 이러한 상수 시간 연산이 가능한 이유는 집합의 구현이 해시 테이블 구현을 기초로 하기 때문이다. 자바스크립트에서는 Set 메소드를 통해 집합을 구현할 수 있다. new Set…","frontmatter":{"title":"집합","path":"/algorithm/algorithm19","date":"11 Jan, 2021","category":"algorithm"},"id":"d2365aaf-b09b-514a-95a4-0f674c327d66"}},{"node":{"excerpt":"동적 프로그래밍(dynamic programming…","frontmatter":{"title":"동적 프로그래밍(1)","path":"/algorithm/algorithm20","date":"11 Jan, 2021","category":"algorithm"},"id":"b9d892e0-1ca1-5df1-bfb5-66d5ab333052"}},{"node":{"excerpt":"최장 공통 부분 수열 알고리즘 두 개의 수열이 있을 때 두 수열의 가장 긴 공통 부분 수열의 길이를 찾는다. 이때 부분 수열 내 항목들이 연속일 필요는 없고 순서만 맞으면 된다. 예를 들어 sam, sie, aie와 같은 부분수열은 sammie…","frontmatter":{"title":"동적 프로그래밍(2)","path":"/algorithm/algorithm21","date":"11 Jan, 2021","category":"algorithm"},"id":"ad1dee5a-104b-5040-8423-56d5a67bec32"}},{"node":{"excerpt":"…","frontmatter":{"title":"검색과 정렬","path":"/algorithm/algorithm22","date":"12 Jan, 2021","category":"algorithm"},"id":"5704a898-4c8d-557c-8b58-257839038a6c"}},{"node":{"excerpt":"1차원 배열에서 연속된 부분 구간 중 그 합이 최대인 구간을 찾는 문제에 대해 아래와 같이 다양한 시간복잡도의 풀이를 가질 수 있다. 시간복잡도 인 알고리즘 주먹구구식(brute-force…","frontmatter":{"title":"다양한 시간복잡도","path":"/algorithm/algorithm23","date":"14 Jan, 2021","category":"algorithm"},"id":"d5ff6730-eae3-5b55-9883-16158bcbfa0f"}},{"node":{"excerpt":"귀납법(Proof by Induction) 귀납법 단계 1. 단계 나누기 : 증명하고자 하는 사실을 여러 단계로 쪼갠다. 2. 첫 단계 증명 : 나눠진 여러 단계들 가운데 첫 단계에서 증명하고 싶은 내용이 성립함을 보인다.…","frontmatter":{"title":"알고리즘 증명","path":"/algorithm/algorithm24","date":"15 Jan, 2021","category":"algorithm"},"id":"980c3284-767e-578d-9369-8148f0a1aa6d"}}]}}}