{"componentChunkName":"component---src-templates-post-template-tsx","path":"/공통글자","result":{"pageContext":{"html":"<h4>문제</h4>\n<p>두 개 이상의 문자열을 매개변수로 받아, 그것들이 공통으로 가지고 있는 문자를 순서대로 반환하라.(공백, 중복 제외)</p>\n<br>\n<h4>Reference</h4>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">commonCharacters</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">input1<span class=\"token punctuation\">,</span> input2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 0. 임의의 문자열의 각 문자를 key로 하여 객체로 만들어주는 헬퍼함수</span>\n  <span class=\"token comment\">// { letter: true, letter: true, ... }</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">letterPicker</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">outputObj<span class=\"token punctuation\">,</span> letter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[a-z]/i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        outputObj<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> outputObj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 0. 두 객체에 대해 공통 key를 뽑아 객체로 만들어주는 헬퍼함수</span>\n  <span class=\"token comment\">// { prop: true, prop: true, ... }</span>\n  <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">commonPicker</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj1<span class=\"token punctuation\">,</span> obj2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">outputObj<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prop <span class=\"token keyword\">in</span> obj2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        outputObj<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> outputObj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 1. input1, input2 외에도 문자열이 주어지는 모든 경우를 포함(arguments)하여 배열에 담기</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">let</span> allInput <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token comment\">// 2. 모든 주어진 문자열들에 대한 공통 글자 추출</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">let</span> commonObj <span class=\"token operator\">=</span> allInput<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> letter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    obj <span class=\"token operator\">=</span> <span class=\"token function\">commonPicker</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token function\">letterPicker</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">letterPicker</span><span class=\"token punctuation\">(</span>input1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token comment\">// 3. 객체의 속성으로 쪼개졌던 공통 글자들을 다시 문자열로 완성하여 리턴</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result<span class=\"token punctuation\">,</span> letter</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>commonObj<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">+=</span> letter<span class=\"token punctuation\">;</span>\n      commonObj<span class=\"token punctuation\">[</span>letter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 중복된 공통글자 제거</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br>\n<p>25번째 줄에서 Array.prototype.slice 메소드를 사용하면서 <strong>call</strong>과 <strong>arguments</strong>를 활용한 것에 주목하자. 함수에 주어지는 인자들을 <strong>arguments</strong>로 묶어서 배열처럼 취급할 수 있다. 단, 그렇다고해서 배열은 아니다. 배열처럼 취급할 수 있을뿐, '.length' 메소드만 빼고는 일반적으로 배열 인스턴스에 사용할 수 있는 거의 모든 메소드는 금지된다. 다만, 말 그대로 배열처럼 취급할 수 있으므로 <strong>call</strong>의 인자로 채택될 수 있다.</p>\n<p>28~31번째 줄의 <strong>reduce</strong> 구문은 다소 복잡해보이지만, 차근차근 살펴본다면 구조가 보인다. 이 reduce의 목표는, 최초에 입력받은 'input1' 문자열을 객체로 변환(헬퍼함수 letterPicker)한 것과 나머지 인자들간의 공통 글자를 뽑는 것이다. 그러기 위해서 나머지 인자들 사이에서도 공통 글자들을 뽑아 객체로 저장하는 작업을 수행한다.</p>","title":"공통글자","category":"algorithm","date":"31 Oct, 2020"}},"staticQueryHashes":["3649515864"]}