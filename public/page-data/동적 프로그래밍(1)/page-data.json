{"componentChunkName":"component---src-templates-post-template-tsx","path":"/동적 프로그래밍(1)","result":{"pageContext":{"html":"<p>동적 프로그래밍(dynamic programming)은 문제를 부분 문제들로 쪼개는 해결방법이다. 이때, 이미 계산된 결과는 메모리에 저장하여 동일 문제 해결에 언제든지 활용될 수 있도록 하여 시간복잡도를 크게 개선하는 것이 핵심이다. 이때 문제들의 해결 복잡도를 경감시켜줄 최적 해결책이 존재한다면 그러한 최적 부분구조를 활용한다.</p>\n<p>예를 들어 차를 타고 도시들을 여행하기 위한 최단 경로를 찾는다고 가정할 때, 서울 ~ 부산의 최단 경로가 대구 ~ 밀양 구간을 반드시 거치는 경우, 대구에서 부산까지의 최단 경로는 반드시 밀양을 거칠 것이다.</p>\n<p>한편, 이러한 동적 프로그래밍의 특성을 반대로 생각해보면, 최적 부분 구조가 존재하면서 중복 부분 문제들이 존재하는 경우에만 사용할 수 있다는 결론에 다다른다.</p>\n<h3>중복 부분문제</h3>\n<p>중복 부분문제들은 해시 테이블, 배열, 또는 행렬에 저장된 해결책을 여러번 사용하여 해결하도록 한다. 이러한 방식을 <strong>메모이제이션</strong>(memoization)이라고 한다. 피보나치 수열이 이러한 메모이제이션, 즉, 중복 부분문제 재활용의 대표적인 예이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 메모이제이션을 위한 빈 해시테이블 생성</span>\n  <span class=\"token keyword\">let</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// 메모이제이션 활용</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// 재귀를 호출하면서 메모이제이션에 추가되도록 한다</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<br />\n<h3>최적 부분구조</h3>\n<h4>걸음 수를 채우는 방법(조합의 수)</h4>\n<p>목표지점까지 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>걸음 거리가 남았다고 가정하자. 1걸음 또는 2걸음 또는 3걸음의 걸음 수를 조합할 수 있다고 할 때, 만약 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">n = 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>라면 목표지점에 도달할 수 있는 조합은 다음과 같다.</p>\n<ol>\n<li>1걸음, 1걸음, 1걸음, 1걸음씩 걷는다.</li>\n<li>1걸음, 1걸음, 2걸음씩 걷는다.</li>\n<li>1걸음, 3걸음씩 걷는다.</li>\n<li>2걸음, 2걸음씩 걷는다.</li>\n</ol>\n<p>이러한 조합의 수는 다음과 같이 생각할 수 있다. 아래는 단순히 재귀 호출을 구현하여 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mn>3</mn><mi>n</mi></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(3^n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>의 시간복잡도를 보일 때보다 훨씬 개선된, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>의 시간복잡도를 만족한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">stepDP</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">step</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>step <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>step <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>step<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>step<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// 1걸음 또는 2걸음 또는 3걸음의 3가지 경우로 조합한다</span></span><span class=\"gatsby-highlight-code-line\">    memo<span class=\"token punctuation\">[</span>step<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">stepDP</span><span class=\"token punctuation\">(</span>step <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">stepDP</span><span class=\"token punctuation\">(</span>step <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">stepDP</span><span class=\"token punctuation\">(</span>step <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>step<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">stepDP</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7 -- {1: 1, 2: 2, 3: 4, 4: 7}</span>\n<span class=\"token function\">stepDP</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 927 -- {1: 1, 2: 2, 3: 4, 4: 7, .... , 12: 927}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br />\n<h4>배낭 문제(knapsack problem)</h4>\n<p>다양한 무게와 값어치를 지니는 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>개의 항목이 주어졌다고 가정할 때, 최대 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span>의 무게를 담을 수 있는 배낭에 해당 항목들을 집어넣되 배낭에 담긴 가치의 합이 최대가 되도록 한다.</p>\n<p>이 문제에서 최적 부분구조를 생각하면, 항목이 최적 부분집합에 포함되거나 포함되지 않는 경우로 분기된다. 따라서 항목들로부터 얻을 수 있는 최대 가치는 1) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>개의 항목에서 이미 최대 가치를 달성할 경우, 또는 2) 1)의 경우에 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>번째 항목까지도 더할 수 있을 때 최대 가치를 달성할 경우이다.</p>\n<p>만약 배낭의 최대 허용 무게가 2이고 무게가 1인 항목 3개가 각각 [10, 20, 30]의 값어치를 갖는 경우를 가정한다면 다음과 같은 형태로 배낭에 항목을 담는 경우의 수들을 재귀 트리로 그릴 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/67884699/104421109-39fd9780-55be-11eb-9790-5c14b4f29514.jpg\" alt=\"dp\"></p>\n<p>즉, 최적 부분집합의 범위 안에서 <strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>번째 항목까지 최대가치에 도달한 경우와 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>번째 항목까지 더하여 최대가치에 도달한 경우 중 큰 경우</strong>들을 메모이제이션에 저장하여 재귀 호출에서의 시간복잡도 절약을 수행함으로서 이 문제를 해결한다. 이러한 방식에 의해 시간복잡도와 공간복잡도는 모두 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>∗</mo><mtext>배낭무게한도</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n*배낭무게한도)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord hangul_fallback\">배</span><span class=\"mord hangul_fallback\">낭</span><span class=\"mord hangul_fallback\">무</span><span class=\"mord hangul_fallback\">게</span><span class=\"mord hangul_fallback\">한</span><span class=\"mord hangul_fallback\">도</span><span class=\"mclose\">)</span></span></span></span>을 만족한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">knapsackDP</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i<span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> memo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 최대 값어치를 담을 결과변수</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 각 부분집합에서 참고할 해시테이블</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">번 항목까지 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>limit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">kg 안에 담을 수 있는 최대 값어치</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">번 항목까지 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>limit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">kg 안에 담을 수 있는 최대 값어치</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 기저 조건</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> limit <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 항목이 최적 부분집합의 범위를 벗어난다면,</span>\n  <span class=\"token comment\">// 최적 부분집합의 범위에 이를 때까지 항목을 찾아낸다</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> limit<span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">knapsackDP</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// 항목의 최적 부분집합의 범위에 존재한다면</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// n-1번째까지 최대가치에 도달한 경우와 n번째까지 포함하여 최대가치에 도달한 경우 중</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// 큰 값을 result에 담는다. 이러한 비교를 limit이 0이 될 때까지 재귀적으로 반복한다.</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token function\">knapsackDP</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">let</span> currentPlus <span class=\"token operator\">=</span></span><span class=\"gatsby-highlight-code-line\">      values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">knapsackDP</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> limit <span class=\"token operator\">-</span> weights<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    result <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> currentPlus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  memo<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">번 항목까지 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>limit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">kg 안에 담을 수 있는 최대 값어치</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> weights <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  i <span class=\"token operator\">=</span> weights<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  limit <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">knapsackDP</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> weights<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16</span>\n<span class=\"token comment\">/*</span>\n<span class=\"token comment\">{</span>\n<span class=\"token comment\">  0번 항목까지 1kg 안에 담을 수 있는 최대 값어치: 5,</span>\n<span class=\"token comment\">  0번 항목까지 2kg 안에 담을 수 있는 최대 값어치: 5,</span>\n<span class=\"token comment\">  0번 항목까지 3kg 안에 담을 수 있는 최대 값어치: 5,</span>\n<span class=\"token comment\">  0번 항목까지 4kg 안에 담을 수 있는 최대 값어치: 5,</span>\n<span class=\"token comment\">  0번 항목까지 5kg 안에 담을 수 있는 최대 값어치: 5,</span>\n<span class=\"token comment\">  0번 항목까지 6kg 안에 담을 수 있는 최대 값어치: 5,</span>\n<span class=\"token comment\">  0번 항목까지 8kg 안에 담을 수 있는 최대 값어치: 5,</span>\n<span class=\"token comment\">  0번 항목까지 10kg 안에 담을 수 있는 최대 값어치: 5,</span>\n<span class=\"token comment\">  1번 항목까지 1kg 안에 담을 수 있는 최대 값어치: 5,</span>\n<span class=\"token comment\">  1번 항목까지 3kg 안에 담을 수 있는 최대 값어치: 8,</span>\n<span class=\"token comment\">  1번 항목까지 4kg 안에 담을 수 있는 최대 값어치: 8,</span>\n<span class=\"token comment\">  1번 항목까지 5kg 안에 담을 수 있는 최대 값어치: 8,</span>\n<span class=\"token comment\">  1번 항목까지 6kg 안에 담을 수 있는 최대 값어치: 8,</span>\n<span class=\"token comment\">  1번 항목까지 8kg 안에 담을 수 있는 최대 값어치: 8,</span>\n<span class=\"token comment\">  1번 항목까지 10kg 안에 담을 수 있는 최대 값어치: 8,</span>\n<span class=\"token comment\">  2번 항목까지 3kg 안에 담을 수 있는 최대 값어치: 8,</span>\n<span class=\"token comment\">  2번 항목까지 5kg 안에 담을 수 있는 최대 값어치: 10,</span>\n<span class=\"token comment\">  2번 항목까지 8kg 안에 담을 수 있는 최대 값어치: 13,</span>\n<span class=\"token comment\">  2번 항목까지 10kg 안에 담을 수 있는 최대 값어치: 13,</span>\n<span class=\"token comment\">  3번 항목까지 5kg 안에 담을 수 있는 최대 값어치: 11,</span>\n<span class=\"token comment\">  3번 항목까지 10kg 안에 담을 수 있는 최대 값어치: 16,</span>\n<span class=\"token comment\">  4번 항목까지 10kg 안에 담을 수 있는 최대 값어치: 16,</span>\n<span class=\"token comment\">  -1번 항목까지 0kg 안에 담을 수 있는 최대 값어치: 0,</span>\n<span class=\"token comment\">  ...,</span>\n<span class=\"token comment\">  -1번 항목까지 10kg 안에 담을 수 있는 최대 값어치: 0,</span>\n<span class=\"token comment\">}</span>\n<span class=\"token comment\">*/</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br />\n<br />\n<br />\n<br />\n<p><text style=\"color:gray\"><em>*참고: \"자바스크립트로 하는 자료 구조와 알고리즘\"(배세민님, 에이콘)</em></text></p>","title":"동적 프로그래밍(1)","category":"algorithm","date":"11 Jan, 2021"}},"staticQueryHashes":["3649515864"]}