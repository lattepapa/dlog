{"componentChunkName":"component---src-templates-post-template-tsx","path":"/메모리 관리","result":{"pageContext":{"html":"<h3>메모리 누수가 발생하는 경우</h3>\n<h4>객체에 대한 참조</h4>\n<p>객체에 대한 참조가 있다면 해당 참조는 메모리에 존재하는 것이다. 따라서 어떤 객체가 존재할 때, 일부 속성만 참조한다고 하더라도 객체 전체를 함수에서 로딩해야 하는 것이므로 참조하지 않는 속성도 메모리를 차지한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 메모리 누수가 발생한 객체 참조</span>\n<span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  prop1<span class=\"token operator\">:</span> <span class=\"token string\">\"test1\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">test</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>prop1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br />\n<p>따라서 객체의 속성을 활용할 땐 반드시 참조하는 속성만 매개변수에서 쓰일 수 있도록 제한해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 메모리 누수해소</span>\n<span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  prop1<span class=\"token operator\">:</span> <span class=\"token string\">\"test1\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>prop1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br />\n<h4>이벤트 콜백에서의 DOM 참조</h4>\n<p>DOM 항목을 가리키는 변수가 이벤트 콜백 외부에 선언된 경우, 해당 DOM 항목을 제거하더라도 여전히 해당 항목은 메모리에 남게 된다. 예를 들어 아래와 같이 <strong>addEventListener</strong> 콜백의 바깥에 ID가 two인 DOM 항목이 선언되어 있기 때문에, 아무리 이러한 이벤트 콜백 안에서 제거(remove)했다고 하더라도 메모리에 존재한 two 항목이 사라지진 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 메모리 누수가 발생한 이벤트 콜백의 DOM 항목 참조</span>\n<span class=\"token keyword\">let</span> one <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> two <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\none<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  two<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>two<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br />\n<p>만약 이러한 DOM 항목의 메모리 누수를 방지하고자 한다면 아래와 같은 리팩토링을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 메모리 누수해소</span>\n<span class=\"token keyword\">let</span> one <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\none<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> two <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  two<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\none<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br />\n<h4>window 전역 객체</h4>\n<p>window 전역 객체에 포함된 객체들은 언제든지 브라우저에서 활용할 수 있어야 하므로 항상 메모리에 상주한다. 따라서 가능하면 전역변수에 값을 선언하는 것은 피하는 것이 좋다.</p>\n<br />\n<br />\n<br />\n<br />\n<p><text style=\"color:gray\"><em>*참고: \"자바스크립트로 하는 자료 구조와 알고리즘\"(배세민님, 에이콘)</em></text></p>","title":"메모리 관리","category":"algorithm","date":"10 Jan, 2021"}},"staticQueryHashes":["3649515864"]}