{"componentChunkName":"component---src-templates-post-template-tsx","path":"/프린터","result":{"pageContext":{"html":"<h4>Programmers 문제</h4>\n<p><em>1) 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.</em><br>\n<em>2) 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.</em><br>\n<em>3) 그렇지 않으면 J를 인쇄합니다.</em></p>\n<p>위의 규칙을 갖는 프린터를 통해, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고자 한다.</p>\n<table>\n<thead>\n<tr>\n<th>1. 제한사항</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>현재 대기목록에는 1개 이상 100개 이하의 문서가 존재</td>\n</tr>\n<tr>\n<td>인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻</td>\n</tr>\n<tr>\n<td>location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>2. 입출력 예</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>priorities</td>\n<td>location</td>\n<td>return</td>\n</tr>\n<tr>\n<td>[2, 1, 3, 2]</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>[1, 1, 9, 1, 1, 1]</td>\n<td>0</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<br />\n<p><strong>큐</strong>(queue)의 원리를 활용하여 풀어낸다. 이때, 어차피 priorities 배열에서 가장 큰 항목이 아니라면 가장 앞에 있는 문서는 자동으로 프린터 출력 대기열의 가장 뒷 순서로 들어가게 된다. 이 반복이 수행된 후, isLocation 속성값이 true인 항목이 나올 때까지 answer에 1을 반복적으로 더한다. 최종 코드는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber 0\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">priorities<span class=\"token punctuation\">,</span> location</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    hashtable <span class=\"token operator\">=</span> priorities<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      value<span class=\"token operator\">:</span> el<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// location과 일치하는 인덱스일 때만 true가 된다</span></span><span class=\"gatsby-highlight-code-line\">      isLocation<span class=\"token operator\">:</span> i <span class=\"token operator\">===</span> location<span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> doc <span class=\"token operator\">=</span> hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> prop<span class=\"token punctuation\">.</span>value <span class=\"token operator\">></span> doc<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      answer<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>isLocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","title":"프린터","category":"algorithm","date":"09 Jan, 2021"}},"staticQueryHashes":["3649515864"]}